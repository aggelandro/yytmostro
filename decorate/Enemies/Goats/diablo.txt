ACTOR Diablo : BaronOfHell2 {
	Health 3500
	PainChance 10
	BloodColor "Red"
	SeeSound "Diablo/see"
	ActiveSound "Diablo/Active"
	PainSound "Diablo/Pain"
	DeathSound "Diablo/Death"
	DamageFactor "BaronComet", 0
	DamageFactor "BaronFire", 0
	DamageFactor "FireBF", 0
	DamageFactor "AfireF", 0
	DamageFactor "Afire", 0
	DamageFactor "FireRF", 0
	DamageFactor "FireR", 0
	DropItem "IsaacItemsTier1HighChanceSpawner"
	DropItem "IsaacItemsTier1HighChanceSpawner"
	DropItem "IsaacItemsTier2HighChanceSpawner"
	DropItem "IsaacItemsTier2MidChanceSpawner"
	DropItem "IsaacItemsTier3MidChanceSpawner"
	DropItem "IsaacItemsTier3MidChanceSpawner"
	DropItem "CrusherGunToken", 128
	DropItem "UniqueWeaponSpawner", 16
	+BRIGHT
	+MISSILEMORE
	+QUICKTORETALIATE
	+BOSS
	var int user_illusions_on;
	
	States {
		SpawnLoop:
			PYLD AB 10 A_Look
			Loop
			
		See:
			TNT1 A 0 A_JumpIf(user_illusions_on == 0, "Illusions")
			TNT1 A 0 A_SpawnItemEx("DiabloWalkFire",0,0,0,0,0,0,0,128)
			TNT1 A 0 A_GiveToChildren("SpriteAToken", 1)
			PYLD AA 3 A_Chase
			TNT1 A 0 A_GiveToChildren("SpriteBToken", 1)
			PYLD BB 3 A_Chase
			TNT1 A 0 A_PlaySound("hoof/step", CHAN_BODY)
			TNT1 A 0 A_SpawnItemEx("DiabloWalkFire",0,0,0,0,0,0,0,128)
			TNT1 A 0 A_GiveToChildren("SpriteCToken", 1)
			PYLD CC 3 A_Chase
			TNT1 A 0 A_GiveToChildren("SpriteDToken", 1)
			PYLD DD 3 A_Chase
			TNT1 A 0 A_PlaySound("hoof/step", CHAN_BODY)
			Loop
			
		Illusions:
			PYLD ON 5
			PYLD M 10 A_SpawnItemEx("DiabloIllusionA",30,30,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETMASTER,0)
			TNT1 A 0 A_SpawnItemEx("DiabloIllusionB",30,-30,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETMASTER,0)
			TNT1 A 0 A_SpawnItemEx("DiabloIllusionC",-30,30,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETMASTER,0)
			TNT1 A 0 A_SpawnItemEx("DiabloIllusionD",-30,-30,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_SETMASTER,0)
			TNT1 A 0 A_SetUserVar("user_illusions_on", 4)
			Goto See+1
			
		Missile:
			TNT1 A 0 A_Jump(128, "GiantFireBalls", "Comet", "MeteorSwarm")
			Goto FireBallBurst
			
		FireBallBurst:
			TNT1 A 0 A_GiveToChildren("SpriteEToken", 1)
			PYLD E 6 A_FaceTarget
			TNT1 A 0 A_GiveToChildren("SpriteFToken", 1)
			PYLD F 6 A_FaceTarget
			TNT1 A 0 A_SpawnItemEx("DiabloWalkFire",0,0,0,0,0,0,0,128)
			TNT1 A 0 A_GiveToChildren("SpriteGToken", 1)
			PYLD G 1 A_CustomMissile("DiabloFireBall", 32, 0, 0)
			PYLD G 1 A_CustomMissile("DiabloFireBall", 32, 0, 5)
			TNT1 A 0 A_GiveToChildren("SpriteHToken", 1)
			PYLD H 2 A_CustomMissile("DiabloFireBall", 32, 0, 10)
			PYLD H 1 A_CustomMissile("DiabloFireBall", 32, 0, 15)
			PYLD H 1 A_CustomMissile("DiabloFireBall", 32, 0, 20)
			TNT1 A 0 A_Jump(87, "Comet")
			TNT1 A 0 A_GiveToChildren("SpriteIToken", 1)
			PYLD I 6 A_FaceTarget
			TNT1 A 0 A_GiveToChildren("SpriteJToken", 1)
			PYLD J 6 A_FaceTarget
			TNT1 A 0 A_SpawnItemEx("DiabloWalkFire",0,0,0,0,0,0,0,128)
			TNT1 A 0 A_GiveToChildren("SpriteKToken", 1)
			PYLD K 1 A_CustomMissile("DiabloFireBall", 32, 0, 0)
			PYLD K 1 A_CustomMissile("DiabloFireBall", 32, 0, -5)
			TNT1 A 0 A_GiveToChildren("SpriteLToken", 1)
			PYLD L 2 A_CustomMissile("DiabloFireBall", 32, 0, -10)
			PYLD L 1 A_CustomMissile("DiabloFireBall", 32, 0, -15)
			PYLD L 1 A_CustomMissile("DiabloFireBall", 32, 0, -20)
			TNT1 A 0 A_Jump(87, "Comet")
			Goto See
			
		GiantFireBalls:
			TNT1 A 0 A_GiveToChildren("SpriteMToken", 1)
			PYLD M 5 A_FaceTarget
			TNT1 A 0 A_GiveToChildren("SpriteNToken", 1)
			PYLD N 5 A_FaceTarget
			TNT1 A 0 A_SpawnItemEx("DiabloWalkFire",0,0,0,0,0,0,0,128)
			PYLD N 2 A_FaceTarget
			TNT1 A 0 A_GiveToChildren("SpriteOToken", 1)
			PYLD O 5 A_FaceTarget
			TNT1 A 0 A_CustomMissile("GiantFireBall", 28, 0, 0)
			TNT1 A 0 A_GiveToChildren("SpritePToken", 1)
			PYLD P 2
			TNT1 A 0 A_Jump(64, "Comet", "MeteorSwarm")
			Goto GiantFireBalls+2
			
		Comet:
			TNT1 A 0 A_GiveToChildren("SpriteMToken", 1)
			PYLD M 7 A_FaceTarget
			TNT1 A 0 A_GiveToChildren("SpriteNToken", 1)
			PYLD N 7 A_FaceTarget
			TNT1 A 0 A_SpawnItemEx("DiabloWalkFire",0,0,0,0,0,0,0,128)
			TNT1 A 0 A_GiveToChildren("SpriteOToken", 1)
			PYLD O 2 A_CustomMissile("DiabloComet", 28, 0, 0)
			TNT1 A 0 A_CustomMissile("DiabloComet", 28, 0, Random(10, 20))
			TNT1 A 0 A_GiveToChildren("SpritePToken", 1)
			PYLD P 4 A_CustomMissile("DiabloComet", 28, 0, Random(-10, -20))
			TNT1 A 0 A_Jump(32, "MeteorSwarm")
			Goto See
			
		MeteorSwarm:
			TNT1 A 0 A_JumpIf(Z+Height+34+5>CeilingZ-39, "See")
			TNT1 A 0 A_GiveToChildren("SpriteOToken", 1)
			PYLD O 5 A_FaceTarget
			TNT1 A 0 A_GiveToChildren("SpriteNToken", 1)
			PYLD N 5 A_FaceTarget
			TNT1 A 0 ACS_NamedExecuteWithResult("showXAuraFor", 1, 150)
			TNT1 A 0 A_SpawnItemEx("DiabloWalkFire",0,0,0,0,0,0,0,128)
			TNT1 A 0 A_PlaySound("Diablo/see", CHAN_BODY)
			TNT1 A 0 A_GiveToChildren("SpriteMToken", 1)
			Goto MeteorSwarmLoop
			
		MeteorSwarmLoop:
			TNT1 A 0 A_GiveInventory("LoopFlag", 1)
			PYLD M 5 A_FaceTarget
			TNT1 A 0 A_SpawnItemEx("DiabloMeteorSource", Random(-2, 2), Random(-10, 10), CeilingZ-Z-39, 0, 0, 0, 0, SXF_TRANSFERPOINTERS)
			TNT1 A 0 A_JumpIfInventory("LoopFlag", 30, 1)
			Loop
			TNT1 A 0 A_TakeInventory("LoopFlag", 30)
			PYLD M 12 A_SpawnItemEx("DiabloWalkFire",0,0,0,0,0,0,0,128)
			TNT1 A 0 A_GiveToChildren("SpriteNToken", 1)
			PYLD N 12 A_SpawnItemEx("DiabloWalkFire",0,0,0,0,0,0,0,128)
			Goto See
			
		Melee:
			TNT1 A 0 A_Jump(128, "Melee2", "InternalExplosions")
			TNT1 A 0 A_GiveToChildren("SpriteEToken", 1)
			PYLD E 6 A_FaceTarget
			TNT1 A 0 A_GiveToChildren("SpriteFToken", 1)
			PYLD F 6 A_FaceTarget
			TNT1 A 0 A_SpawnItemEx("DiabloWalkFire",0,0,0,0,0,0,0,128)
			TNT1 A 0 A_GiveToChildren("SpriteGToken", 1)
			PYLD G 7 A_CustomComboAttack("DiabloFireBall", 32, Random(1,5)*6, "Diablo/FireExplode", "BaronFire", False)
			TNT1 A 0 A_GiveToChildren("SpriteHToken", 1)
			PYLD H 2
			Goto See
			
		Melee2:
			TNT1 A 0 A_GiveToChildren("SpriteIToken", 1)
			PYLD I 6 A_FaceTarget
			TNT1 A 0 A_GiveToChildren("SpriteJToken", 1)
			PYLD J 6 A_FaceTarget
			TNT1 A 0 A_SpawnItemEx("DiabloWalkFire",0,0,0,0,0,0,0,128)
			TNT1 A 0 A_GiveToChildren("SpriteKToken", 1)
			PYLD K 7 A_CustomComboAttack("DiabloFireBall", 32, Random(1,5)*6, "Diablo/FireExplode", "BaronFire", False)
			TNT1 A 0 A_GiveToChildren("SpriteLToken", 1)
			PYLD L 2
			Goto See
			
		InternalExplosions:
			TNT1 A 0 A_GiveToChildren("SpriteOToken", 1)
			PYLD O 5 A_FaceTarget
			TNT1 A 0 A_GiveToChildren("SpriteNToken", 1)
			PYLD N 5 A_FaceTarget
			TNT1 A 0 A_SpawnItemEx("DiabloWalkFire",0,0,0,0,0,0,0,128)
			TNT1 A 0 A_GiveToChildren("SpriteMToken", 1)
			PYLD MMMMM 5 A_SpawnItemEx("BigInternalExplosion", 0, 0, Height/2, 0, 0, 0, 0, SXF_NOCHECKPOSITION)
			TNT1 A 0 A_GiveToChildren("SpriteNToken", 1)
			PYLD N 4
			Goto See
			
		Pain:
			TNT1 A 0 A_GiveToChildren("SpriteQToken", 1)
			PYLD Q 4 A_Pain
			TNT1 A 0 A_Jump(61, "PainMissile")
			Goto See
			
		PainMissile:
			PYLD Q 4 A_Pain
			Goto Missile
			
		Death: 
			PYLD R 7 A_KillChildren
			PYLD S 6 A_Scream
			PYLD T 5 A_Fall
			TNT1 AAAA 0 A_CustomMissile("SmokeBigExplosion", Random(30,60), 0, random(0,360), 2, random(0,360))
			PYLD UVWXYZ 4 Bright A_SpawnItemEx("OrangeParticleSpawner", Random(10,-10), Random(10,-10), Random(30,60), 0, 0, 0, 0, 128)
			TNT1 A 0 A_NoBlocking
			PYLD Z -1 A_BossDeath
			Stop
			
		Raise:
			PYLD Z 8
			PYLD YXWVUTSR 8
			Goto See
	}
}

ACTOR DiabloFireBall {
	Speed 16
	FastSpeed 20
	Damage 7
	Radius 8
	Height 12
	PROJECTILE
	RENDERSTYLE ADD
	DamageType "BaronFire"
	SeeSound "Diablo/FireShoot"
	DeathSound "Diablo/FireExplode"
	Species "DiabloMagic"
	+THRUSPECIES
	
	States {
		Spawn:
			HLK1 AB 1 Bright A_SpawnItemEx("FBallTrail",0,0,0,0,0,0,0,128,0)
			Loop
			
		Death:
			TNT1 A 0
			TNT1 A 0 A_SpawnItemEx("OrangeParticleSpawner", 0, 0, 0, 0, 0, 0, 0, 128)
			TNT1 AAA 0 A_CustomMissile("SmallRedExplosion", 0, 0, random(0,360), 2, random(0,360))
			TNT1 AAA 0 A_CustomMissile("SmokeSmallExplosion", 0, 0, random(0,360), 2, random(0,360))	  
			HLK1 CDEFGHI 3 Bright
			Stop
    }
}

ACTOR FBallTrail {
	RenderStyle Add
	+CLIENTSIDEONLY
	+NOBLOCKMAP
	+DONTSPLASH
	+NOCLIP
	+NOINTERACTION
	+THRUACTORS
	Scale 0.85
	
	States {
		Spawn:
			HLK1 AB 1 NoDelay A_FadeOut(0.25)
			Loop
    }
}

ACTOR GiantFireBall {
  Speed 20
  FastSpeed 26
  Damage 10
  Radius 13
  Height 25
  Projectile
  +Randomize
  RenderStyle Add
	DamageType "BaronFire"
  SeeSound "imp/attack"
  DeathSound "imp/shotx"
  Decal Scorch
	Species "DiabloMagic"
	+THRUSPECIES
	
  States {
		Spawn: 
			BRBA AB 2 Bright A_SpawnItemEx("GFBallTrail", 0, 0, 0, 0, 0, 0, 0, 128)
			Loop
			
		Death:
			TNT1 A 0
			TNT1 A 0 A_SpawnItemEx("OrangeParticleSpawner", 0, 0, 0, 0, 0, 0, 0, 128)
			TNT1 AAA 0 A_CustomMissile("SmallRedExplosion", 0, 0, random(0,360), 2, random(0,360))
			TNT1 AAA 0 A_CustomMissile("SmokeSmallExplosion", 0, 0, random(0,360), 2, random(0,360))	
			BRBA KLMNOPQRSTUVWX 3 Bright
			Stop
  }
}

ACTOR GFBallTrail {
	RenderStyle Add
	+CLIENTSIDEONLY
	+NOBLOCKMAP
	+DONTSPLASH
	+NOCLIP
	+NOINTERACTION
	+THRUACTORS
	
  States {
		Spawn:
			BRBA CDEFGHIJ 3 Bright A_FadeOut
			Stop       
  }
}

ACTOR DiabloComet : Comet {
	DamageType "BaronFire"
	Species "DiabloMagic"
	Scale 0.85
	+THRUSPECIES
	+BRIGHT
	
	States {
		Spawn:
			COMT AAAABBBBCCCC 1 A_SpawnItemEx("DiabloCometTrail",0,0,0,0,0,0,0,128)
			Loop
			
		Death:
			TNT1 A 0 A_Explode(64, 102)
			TNT1 A 0 A_SpawnItemEx("OrangeParticleSpawner", 0, 0, 0, 0, 0, 0, 0, 128)
			COMT D 3 A_SpawnItemEx("DiabloCometDeathGlow",0,0,0,0,0,0,0,128,0)
			COMT E 3 A_SpawnItemEx("DiabloCometDeath",0,0,0,0,0,0,0,128,0)
			Stop
	}
}

ACTOR DiabloCometTrail : CometTrail {
	Alpha 0.3
	States {
		Spawn:
			FRTB ABCDEFGHI 1 NoDelay Bright
			Stop
	}
}

ACTOR DiabloCometDeath : CometDeath {
	States {
		Spawn:
			TNT1 AAA 0 NoDelay A_CustomMissile("NormalRedExplosion", 0, 0, random(0,360), 2, random(0,360))	
			TNT1 AAA 0 A_CustomMissile("SmokeBigExplosion", 0, 0, random(0,360), 2, random(0,360))
			COMT FGHI 3 Bright A_FadeOut(0.1)
			Stop
	}
}

ACTOR DiabloCometDeathGlow : DiabloCometTrail {
	Scale 2.0
	Alpha 0.6
	
	States {
		Spawn:
			FRTB ABCDEFGHI 3 NoDelay Bright
			Stop
	}
}

ACTOR DiabloMeteor : DiabloComet {
	Radius 15
	Height 34
	Speed 15
	Scale 1.15
	Damage 10
	
	States {
		Death:
			TNT1 A 0 A_Explode(64, 102)
			TNT1 A 0 A_SpawnItemEx("OrangeParticleSpawner", 0, 0, 0, 0, 0, 0, 0, 128)
			COMT D 3 A_SpawnItemEx("DiabloCometDeathGlow",0,0,0,0,0,0,0,128,0)
			COMT E 3 A_SpawnItemEx("DiabloMeteorDeath",0,0,0,0,0,0,0,128,0)
			Stop
	}
}

ACTOR DiabloMeteorDeath : DiabloCometDeath {
	States {
		Spawn:
			TNT1 AAA 0 NoDelay A_CustomMissile("BigRedExplosion", 0, 0, random(0,360), 2, random(0,360))	
			TNT1 AAA 0 A_CustomMissile("SmokeBigExplosion", 0, 0, random(0,360), 2, random(0,360))
			COMT FGHI 3 Bright A_FadeOut(0.1)
			Stop
	}
}

ACTOR DiabloMeteorSource {
	+NOINTERACTION
	+NOGRAVITY
	
	States {
		Spawn:
			TNT1 A 1 NoDelay A_CustomMissile("DiabloMeteor", 0, FRandom(-150, 150), Random(-20, 20))
			Stop
	}
}

ACTOR BigInternalExplosion {
	Radius 10
	Height 10
	Projectile
	Scale 1.15
	DamageType "BaronFire"
	SeeSound "commander/explosion"
	
	States {
		Spawn:
		Death:
			TNT1 A 0 NoDelay A_Explode(64, 96)
			TNT1 A 0 A_SpawnItemEx("OrangeParticleSpawner", 0, 0, 0, 0, 0, 0, 0, 128)
			COMT D 3 A_SpawnItemEx("DiabloCometDeathGlow",0,0,0,0,0,0,0,128,0)
			COMT E 3 A_SpawnItemEx("DiabloCometDeath",0,0,0,0,0,0,0,128,0)
			Stop
	}
}

ACTOR DiabloWalkFire : ArmncubusWalkFire {
	DamageType "BaronFire"
	Scale 1.1
	
  States {
		Spawn:
			TNT1 A 10
			IFWF ABC 3 Bright A_Explode(Random(0, 2), 10, 0)
			TNT1 A 0 A_Jump(191,3)
			TNT1 A 0 A_CustomMissile("DiabloWalkFire", 0, 24, 0)
			TNT1 A 0 A_CustomMissile("DiabloWalkFire", 0, -24, 0)
			IFWF DEFGHIJKLMNO 3 Bright A_Explode(Random(0, 2), 10, 0)
			Stop
	}
}

ACTOR DiabloIllusion : AbstractIllusion {
	Radius 24
	Height 64
	Health 350
	DamageFactor "BaronComet", 0
	DamageFactor "BaronFire", 0
	Species "DiabloMagic"
	var int user_x_off;
	var int user_y_off;
	
	States {
		Spawn:
			PYLD MMMMM 1 NoDelay A_FadeIn(0.1)
			TNT1 A -1 A_Jump(256, "SpawnChild")
			Wait
			
		SpawnLoop:
			TNT1 A 0 A_JumpIfInventory("SpriteAToken", 1, "SpriteA")
			TNT1 A 0 A_JumpIfInventory("SpriteBToken", 1, "SpriteB")
			TNT1 A 0 A_JumpIfInventory("SpriteCToken", 1, "SpriteC")
			TNT1 A 0 A_JumpIfInventory("SpriteDToken", 1, "SpriteD")
			TNT1 A 0 A_JumpIfInventory("SpriteEToken", 1, "SpriteE")
			TNT1 A 0 A_JumpIfInventory("SpriteFToken", 1, "SpriteF")
			TNT1 A 0 A_JumpIfInventory("SpriteGToken", 1, "SpriteG")
			TNT1 A 0 A_JumpIfInventory("SpriteHToken", 1, "SpriteH")
			TNT1 A 0 A_JumpIfInventory("SpriteIToken", 1, "SpriteI")
			TNT1 A 0 A_JumpIfInventory("SpriteJToken", 1, "SpriteJ")
			TNT1 A 0 A_JumpIfInventory("SpriteKToken", 1, "SpriteK")
			TNT1 A 0 A_JumpIfInventory("SpriteLToken", 1, "SpriteL")
			TNT1 A 0 A_JumpIfInventory("SpriteMToken", 1, "SpriteM")
			TNT1 A 0 A_JumpIfInventory("SpriteNToken", 1, "SpriteN")
			TNT1 A 0 A_JumpIfInventory("SpriteOToken", 1, "SpriteO")
			TNT1 A 0 A_JumpIfInventory("SpritePToken", 1, "SpriteP")
			TNT1 A 0 A_JumpIfInventory("SpriteQToken", 1, "SpriteQ")
			PYLD M 1 A_Warp(AAPTR_MASTER, user_x_off, user_y_off, 0, 0, WARPF_NOCHECKPOSITION)
			Loop
			
		SpriteA:
			TNT1 A 0 A_TakeInventory("SpriteAToken", 1)
			TNT1 A 0 A_JumpIfInventory("SpriteBToken", 1, "SpriteB")
			TNT1 A 0 A_JumpIfInventory("SpriteCToken", 1, "SpriteC")
			TNT1 A 0 A_JumpIfInventory("SpriteDToken", 1, "SpriteD")
			TNT1 A 0 A_JumpIfInventory("SpriteEToken", 1, "SpriteE")
			TNT1 A 0 A_JumpIfInventory("SpriteFToken", 1, "SpriteF")
			TNT1 A 0 A_JumpIfInventory("SpriteGToken", 1, "SpriteG")
			TNT1 A 0 A_JumpIfInventory("SpriteHToken", 1, "SpriteH")
			TNT1 A 0 A_JumpIfInventory("SpriteIToken", 1, "SpriteI")
			TNT1 A 0 A_JumpIfInventory("SpriteJToken", 1, "SpriteJ")
			TNT1 A 0 A_JumpIfInventory("SpriteKToken", 1, "SpriteK")
			TNT1 A 0 A_JumpIfInventory("SpriteLToken", 1, "SpriteL")
			TNT1 A 0 A_JumpIfInventory("SpriteMToken", 1, "SpriteM")
			TNT1 A 0 A_JumpIfInventory("SpriteNToken", 1, "SpriteN")
			TNT1 A 0 A_JumpIfInventory("SpriteOToken", 1, "SpriteO")
			TNT1 A 0 A_JumpIfInventory("SpritePToken", 1, "SpriteP")
			TNT1 A 0 A_JumpIfInventory("SpriteQToken", 1, "SpriteQ")
			PYLD A 1 A_Warp(AAPTR_MASTER, user_x_off, user_y_off, 0, 0, WARPF_NOCHECKPOSITION)
			Goto SpriteA+1
			
		SpriteB:
			TNT1 A 0 A_TakeInventory("SpriteBToken", 1)
			TNT1 A 0 A_JumpIfInventory("SpriteAToken", 1, "SpriteA")
			TNT1 A 0 A_JumpIfInventory("SpriteCToken", 1, "SpriteC")
			TNT1 A 0 A_JumpIfInventory("SpriteDToken", 1, "SpriteD")
			TNT1 A 0 A_JumpIfInventory("SpriteEToken", 1, "SpriteE")
			TNT1 A 0 A_JumpIfInventory("SpriteFToken", 1, "SpriteF")
			TNT1 A 0 A_JumpIfInventory("SpriteGToken", 1, "SpriteG")
			TNT1 A 0 A_JumpIfInventory("SpriteHToken", 1, "SpriteH")
			TNT1 A 0 A_JumpIfInventory("SpriteIToken", 1, "SpriteI")
			TNT1 A 0 A_JumpIfInventory("SpriteJToken", 1, "SpriteJ")
			TNT1 A 0 A_JumpIfInventory("SpriteKToken", 1, "SpriteK")
			TNT1 A 0 A_JumpIfInventory("SpriteLToken", 1, "SpriteL")
			TNT1 A 0 A_JumpIfInventory("SpriteMToken", 1, "SpriteM")
			TNT1 A 0 A_JumpIfInventory("SpriteNToken", 1, "SpriteN")
			TNT1 A 0 A_JumpIfInventory("SpriteOToken", 1, "SpriteO")
			TNT1 A 0 A_JumpIfInventory("SpritePToken", 1, "SpriteP")
			TNT1 A 0 A_JumpIfInventory("SpriteQToken", 1, "SpriteQ")
			PYLD B 1 A_Warp(AAPTR_MASTER, user_x_off, user_y_off, 0, 0, WARPF_NOCHECKPOSITION)
			Goto SpriteB+1
			
		SpriteC:
			TNT1 A 0 A_TakeInventory("SpriteCToken", 1)
			TNT1 A 0 A_JumpIfInventory("SpriteAToken", 1, "SpriteA")
			TNT1 A 0 A_JumpIfInventory("SpriteBToken", 1, "SpriteB")
			TNT1 A 0 A_JumpIfInventory("SpriteDToken", 1, "SpriteD")
			TNT1 A 0 A_JumpIfInventory("SpriteEToken", 1, "SpriteE")
			TNT1 A 0 A_JumpIfInventory("SpriteFToken", 1, "SpriteF")
			TNT1 A 0 A_JumpIfInventory("SpriteGToken", 1, "SpriteG")
			TNT1 A 0 A_JumpIfInventory("SpriteHToken", 1, "SpriteH")
			TNT1 A 0 A_JumpIfInventory("SpriteIToken", 1, "SpriteI")
			TNT1 A 0 A_JumpIfInventory("SpriteJToken", 1, "SpriteJ")
			TNT1 A 0 A_JumpIfInventory("SpriteKToken", 1, "SpriteK")
			TNT1 A 0 A_JumpIfInventory("SpriteLToken", 1, "SpriteL")
			TNT1 A 0 A_JumpIfInventory("SpriteMToken", 1, "SpriteM")
			TNT1 A 0 A_JumpIfInventory("SpriteNToken", 1, "SpriteN")
			TNT1 A 0 A_JumpIfInventory("SpriteOToken", 1, "SpriteO")
			TNT1 A 0 A_JumpIfInventory("SpritePToken", 1, "SpriteP")
			TNT1 A 0 A_JumpIfInventory("SpriteQToken", 1, "SpriteQ")
			PYLD C 1 A_Warp(AAPTR_MASTER, user_x_off, user_y_off, 0, 0, WARPF_NOCHECKPOSITION)
			Goto SpriteC+1
			
		SpriteD:
			TNT1 A 0 A_TakeInventory("SpriteDToken", 1)
			TNT1 A 0 A_JumpIfInventory("SpriteAToken", 1, "SpriteA")
			TNT1 A 0 A_JumpIfInventory("SpriteCToken", 1, "SpriteC")
			TNT1 A 0 A_JumpIfInventory("SpriteBToken", 1, "SpriteB")
			TNT1 A 0 A_JumpIfInventory("SpriteEToken", 1, "SpriteE")
			TNT1 A 0 A_JumpIfInventory("SpriteFToken", 1, "SpriteF")
			TNT1 A 0 A_JumpIfInventory("SpriteGToken", 1, "SpriteG")
			TNT1 A 0 A_JumpIfInventory("SpriteHToken", 1, "SpriteH")
			TNT1 A 0 A_JumpIfInventory("SpriteIToken", 1, "SpriteI")
			TNT1 A 0 A_JumpIfInventory("SpriteJToken", 1, "SpriteJ")
			TNT1 A 0 A_JumpIfInventory("SpriteKToken", 1, "SpriteK")
			TNT1 A 0 A_JumpIfInventory("SpriteLToken", 1, "SpriteL")
			TNT1 A 0 A_JumpIfInventory("SpriteMToken", 1, "SpriteM")
			TNT1 A 0 A_JumpIfInventory("SpriteNToken", 1, "SpriteN")
			TNT1 A 0 A_JumpIfInventory("SpriteOToken", 1, "SpriteO")
			TNT1 A 0 A_JumpIfInventory("SpritePToken", 1, "SpriteP")
			TNT1 A 0 A_JumpIfInventory("SpriteQToken", 1, "SpriteQ")
			PYLD D 1 A_Warp(AAPTR_MASTER, user_x_off, user_y_off, 0, 0, WARPF_NOCHECKPOSITION)
			Goto SpriteD+1
			
		SpriteE:
			TNT1 A 0 A_TakeInventory("SpriteEToken", 1)
			TNT1 A 0 A_JumpIfInventory("SpriteAToken", 1, "SpriteA")
			TNT1 A 0 A_JumpIfInventory("SpriteCToken", 1, "SpriteC")
			TNT1 A 0 A_JumpIfInventory("SpriteDToken", 1, "SpriteD")
			TNT1 A 0 A_JumpIfInventory("SpriteBToken", 1, "SpriteB")
			TNT1 A 0 A_JumpIfInventory("SpriteFToken", 1, "SpriteF")
			TNT1 A 0 A_JumpIfInventory("SpriteGToken", 1, "SpriteG")
			TNT1 A 0 A_JumpIfInventory("SpriteHToken", 1, "SpriteH")
			TNT1 A 0 A_JumpIfInventory("SpriteIToken", 1, "SpriteI")
			TNT1 A 0 A_JumpIfInventory("SpriteJToken", 1, "SpriteJ")
			TNT1 A 0 A_JumpIfInventory("SpriteKToken", 1, "SpriteK")
			TNT1 A 0 A_JumpIfInventory("SpriteLToken", 1, "SpriteL")
			TNT1 A 0 A_JumpIfInventory("SpriteMToken", 1, "SpriteM")
			TNT1 A 0 A_JumpIfInventory("SpriteNToken", 1, "SpriteN")
			TNT1 A 0 A_JumpIfInventory("SpriteOToken", 1, "SpriteO")
			TNT1 A 0 A_JumpIfInventory("SpritePToken", 1, "SpriteP")
			TNT1 A 0 A_JumpIfInventory("SpriteQToken", 1, "SpriteQ")
			PYLD E 1 A_Warp(AAPTR_MASTER, user_x_off, user_y_off, 0, 0, WARPF_NOCHECKPOSITION)
			Goto SpriteE+1
			
		SpriteF:
			TNT1 A 0 A_TakeInventory("SpriteFToken", 1)
			TNT1 A 0 A_JumpIfInventory("SpriteAToken", 1, "SpriteA")
			TNT1 A 0 A_JumpIfInventory("SpriteCToken", 1, "SpriteC")
			TNT1 A 0 A_JumpIfInventory("SpriteDToken", 1, "SpriteD")
			TNT1 A 0 A_JumpIfInventory("SpriteEToken", 1, "SpriteE")
			TNT1 A 0 A_JumpIfInventory("SpriteBToken", 1, "SpriteB")
			TNT1 A 0 A_JumpIfInventory("SpriteGToken", 1, "SpriteG")
			TNT1 A 0 A_JumpIfInventory("SpriteHToken", 1, "SpriteH")
			TNT1 A 0 A_JumpIfInventory("SpriteIToken", 1, "SpriteI")
			TNT1 A 0 A_JumpIfInventory("SpriteJToken", 1, "SpriteJ")
			TNT1 A 0 A_JumpIfInventory("SpriteKToken", 1, "SpriteK")
			TNT1 A 0 A_JumpIfInventory("SpriteLToken", 1, "SpriteL")
			TNT1 A 0 A_JumpIfInventory("SpriteMToken", 1, "SpriteM")
			TNT1 A 0 A_JumpIfInventory("SpriteNToken", 1, "SpriteN")
			TNT1 A 0 A_JumpIfInventory("SpriteOToken", 1, "SpriteO")
			TNT1 A 0 A_JumpIfInventory("SpritePToken", 1, "SpriteP")
			TNT1 A 0 A_JumpIfInventory("SpriteQToken", 1, "SpriteQ")
			PYLD F 1 A_Warp(AAPTR_MASTER, user_x_off, user_y_off, 0, 0, WARPF_NOCHECKPOSITION)
			Goto SpriteF+1
			
		SpriteG:
			TNT1 A 0 A_TakeInventory("SpriteGToken", 1)
			TNT1 A 0 A_JumpIfInventory("SpriteAToken", 1, "SpriteA")
			TNT1 A 0 A_JumpIfInventory("SpriteCToken", 1, "SpriteC")
			TNT1 A 0 A_JumpIfInventory("SpriteDToken", 1, "SpriteD")
			TNT1 A 0 A_JumpIfInventory("SpriteEToken", 1, "SpriteE")
			TNT1 A 0 A_JumpIfInventory("SpriteFToken", 1, "SpriteF")
			TNT1 A 0 A_JumpIfInventory("SpriteBToken", 1, "SpriteB")
			TNT1 A 0 A_JumpIfInventory("SpriteHToken", 1, "SpriteH")
			TNT1 A 0 A_JumpIfInventory("SpriteIToken", 1, "SpriteI")
			TNT1 A 0 A_JumpIfInventory("SpriteJToken", 1, "SpriteJ")
			TNT1 A 0 A_JumpIfInventory("SpriteKToken", 1, "SpriteK")
			TNT1 A 0 A_JumpIfInventory("SpriteLToken", 1, "SpriteL")
			TNT1 A 0 A_JumpIfInventory("SpriteMToken", 1, "SpriteM")
			TNT1 A 0 A_JumpIfInventory("SpriteNToken", 1, "SpriteN")
			TNT1 A 0 A_JumpIfInventory("SpriteOToken", 1, "SpriteO")
			TNT1 A 0 A_JumpIfInventory("SpritePToken", 1, "SpriteP")
			TNT1 A 0 A_JumpIfInventory("SpriteQToken", 1, "SpriteQ")
			PYLD G 1 A_Warp(AAPTR_MASTER, user_x_off, user_y_off, 0, 0, WARPF_NOCHECKPOSITION)
			Goto SpriteG+1
			
		SpriteH:
			TNT1 A 0 A_TakeInventory("SpriteHToken", 1)
			TNT1 A 0 A_JumpIfInventory("SpriteAToken", 1, "SpriteA")
			TNT1 A 0 A_JumpIfInventory("SpriteCToken", 1, "SpriteC")
			TNT1 A 0 A_JumpIfInventory("SpriteDToken", 1, "SpriteD")
			TNT1 A 0 A_JumpIfInventory("SpriteEToken", 1, "SpriteE")
			TNT1 A 0 A_JumpIfInventory("SpriteFToken", 1, "SpriteF")
			TNT1 A 0 A_JumpIfInventory("SpriteGToken", 1, "SpriteG")
			TNT1 A 0 A_JumpIfInventory("SpriteBToken", 1, "SpriteB")
			TNT1 A 0 A_JumpIfInventory("SpriteIToken", 1, "SpriteI")
			TNT1 A 0 A_JumpIfInventory("SpriteJToken", 1, "SpriteJ")
			TNT1 A 0 A_JumpIfInventory("SpriteKToken", 1, "SpriteK")
			TNT1 A 0 A_JumpIfInventory("SpriteLToken", 1, "SpriteL")
			TNT1 A 0 A_JumpIfInventory("SpriteMToken", 1, "SpriteM")
			TNT1 A 0 A_JumpIfInventory("SpriteNToken", 1, "SpriteN")
			TNT1 A 0 A_JumpIfInventory("SpriteOToken", 1, "SpriteO")
			TNT1 A 0 A_JumpIfInventory("SpritePToken", 1, "SpriteP")
			TNT1 A 0 A_JumpIfInventory("SpriteQToken", 1, "SpriteQ")
			PYLD H 1 A_Warp(AAPTR_MASTER, user_x_off, user_y_off, 0, 0, WARPF_NOCHECKPOSITION)
			Goto SpriteH+1
			
		SpriteI:
			TNT1 A 0 A_TakeInventory("SpriteIToken", 1)
			TNT1 A 0 A_JumpIfInventory("SpriteAToken", 1, "SpriteA")
			TNT1 A 0 A_JumpIfInventory("SpriteCToken", 1, "SpriteC")
			TNT1 A 0 A_JumpIfInventory("SpriteDToken", 1, "SpriteD")
			TNT1 A 0 A_JumpIfInventory("SpriteEToken", 1, "SpriteE")
			TNT1 A 0 A_JumpIfInventory("SpriteFToken", 1, "SpriteF")
			TNT1 A 0 A_JumpIfInventory("SpriteGToken", 1, "SpriteG")
			TNT1 A 0 A_JumpIfInventory("SpriteHToken", 1, "SpriteH")
			TNT1 A 0 A_JumpIfInventory("SpriteBToken", 1, "SpriteB")
			TNT1 A 0 A_JumpIfInventory("SpriteJToken", 1, "SpriteJ")
			TNT1 A 0 A_JumpIfInventory("SpriteKToken", 1, "SpriteK")
			TNT1 A 0 A_JumpIfInventory("SpriteLToken", 1, "SpriteL")
			TNT1 A 0 A_JumpIfInventory("SpriteMToken", 1, "SpriteM")
			TNT1 A 0 A_JumpIfInventory("SpriteNToken", 1, "SpriteN")
			TNT1 A 0 A_JumpIfInventory("SpriteOToken", 1, "SpriteO")
			TNT1 A 0 A_JumpIfInventory("SpritePToken", 1, "SpriteP")
			TNT1 A 0 A_JumpIfInventory("SpriteQToken", 1, "SpriteQ")
			PYLD I 1 A_Warp(AAPTR_MASTER, user_x_off, user_y_off, 0, 0, WARPF_NOCHECKPOSITION)
			Goto SpriteI+1
			
		SpriteJ:
			TNT1 A 0 A_TakeInventory("SpriteJToken", 1)
			TNT1 A 0 A_JumpIfInventory("SpriteAToken", 1, "SpriteA")
			TNT1 A 0 A_JumpIfInventory("SpriteCToken", 1, "SpriteC")
			TNT1 A 0 A_JumpIfInventory("SpriteDToken", 1, "SpriteD")
			TNT1 A 0 A_JumpIfInventory("SpriteEToken", 1, "SpriteE")
			TNT1 A 0 A_JumpIfInventory("SpriteFToken", 1, "SpriteF")
			TNT1 A 0 A_JumpIfInventory("SpriteGToken", 1, "SpriteG")
			TNT1 A 0 A_JumpIfInventory("SpriteHToken", 1, "SpriteH")
			TNT1 A 0 A_JumpIfInventory("SpriteIToken", 1, "SpriteI")
			TNT1 A 0 A_JumpIfInventory("SpriteBToken", 1, "SpriteB")
			TNT1 A 0 A_JumpIfInventory("SpriteKToken", 1, "SpriteK")
			TNT1 A 0 A_JumpIfInventory("SpriteLToken", 1, "SpriteL")
			TNT1 A 0 A_JumpIfInventory("SpriteMToken", 1, "SpriteM")
			TNT1 A 0 A_JumpIfInventory("SpriteNToken", 1, "SpriteN")
			TNT1 A 0 A_JumpIfInventory("SpriteOToken", 1, "SpriteO")
			TNT1 A 0 A_JumpIfInventory("SpritePToken", 1, "SpriteP")
			TNT1 A 0 A_JumpIfInventory("SpriteQToken", 1, "SpriteQ")
			PYLD J 1 A_Warp(AAPTR_MASTER, user_x_off, user_y_off, 0, 0, WARPF_NOCHECKPOSITION)
			Goto SpriteJ+1
			
		SpriteK:
			TNT1 A 0 A_TakeInventory("SpriteKToken", 1)
			TNT1 A 0 A_JumpIfInventory("SpriteAToken", 1, "SpriteA")
			TNT1 A 0 A_JumpIfInventory("SpriteCToken", 1, "SpriteC")
			TNT1 A 0 A_JumpIfInventory("SpriteDToken", 1, "SpriteD")
			TNT1 A 0 A_JumpIfInventory("SpriteEToken", 1, "SpriteE")
			TNT1 A 0 A_JumpIfInventory("SpriteFToken", 1, "SpriteF")
			TNT1 A 0 A_JumpIfInventory("SpriteGToken", 1, "SpriteG")
			TNT1 A 0 A_JumpIfInventory("SpriteHToken", 1, "SpriteH")
			TNT1 A 0 A_JumpIfInventory("SpriteIToken", 1, "SpriteI")
			TNT1 A 0 A_JumpIfInventory("SpriteJToken", 1, "SpriteJ")
			TNT1 A 0 A_JumpIfInventory("SpriteBToken", 1, "SpriteB")
			TNT1 A 0 A_JumpIfInventory("SpriteLToken", 1, "SpriteL")
			TNT1 A 0 A_JumpIfInventory("SpriteMToken", 1, "SpriteM")
			TNT1 A 0 A_JumpIfInventory("SpriteNToken", 1, "SpriteN")
			TNT1 A 0 A_JumpIfInventory("SpriteOToken", 1, "SpriteO")
			TNT1 A 0 A_JumpIfInventory("SpritePToken", 1, "SpriteP")
			TNT1 A 0 A_JumpIfInventory("SpriteQToken", 1, "SpriteQ")
			PYLD K 1 A_Warp(AAPTR_MASTER, user_x_off, user_y_off, 0, 0, WARPF_NOCHECKPOSITION)
			Goto SpriteK+1
			
		SpriteL:
			TNT1 A 0 A_TakeInventory("SpriteLToken", 1)
			TNT1 A 0 A_JumpIfInventory("SpriteAToken", 1, "SpriteA")
			TNT1 A 0 A_JumpIfInventory("SpriteCToken", 1, "SpriteC")
			TNT1 A 0 A_JumpIfInventory("SpriteDToken", 1, "SpriteD")
			TNT1 A 0 A_JumpIfInventory("SpriteEToken", 1, "SpriteE")
			TNT1 A 0 A_JumpIfInventory("SpriteFToken", 1, "SpriteF")
			TNT1 A 0 A_JumpIfInventory("SpriteGToken", 1, "SpriteG")
			TNT1 A 0 A_JumpIfInventory("SpriteHToken", 1, "SpriteH")
			TNT1 A 0 A_JumpIfInventory("SpriteIToken", 1, "SpriteI")
			TNT1 A 0 A_JumpIfInventory("SpriteJToken", 1, "SpriteJ")
			TNT1 A 0 A_JumpIfInventory("SpriteKToken", 1, "SpriteK")
			TNT1 A 0 A_JumpIfInventory("SpriteBToken", 1, "SpriteB")
			TNT1 A 0 A_JumpIfInventory("SpriteMToken", 1, "SpriteM")
			TNT1 A 0 A_JumpIfInventory("SpriteNToken", 1, "SpriteN")
			TNT1 A 0 A_JumpIfInventory("SpriteOToken", 1, "SpriteO")
			TNT1 A 0 A_JumpIfInventory("SpritePToken", 1, "SpriteP")
			TNT1 A 0 A_JumpIfInventory("SpriteQToken", 1, "SpriteQ")
			PYLD L 1 A_Warp(AAPTR_MASTER, user_x_off, user_y_off, 0, 0, WARPF_NOCHECKPOSITION)
			Goto SpriteL+1
			
		SpriteM:
			TNT1 A 0 A_TakeInventory("SpriteMToken", 1)
			TNT1 A 0 A_JumpIfInventory("SpriteAToken", 1, "SpriteA")
			TNT1 A 0 A_JumpIfInventory("SpriteCToken", 1, "SpriteC")
			TNT1 A 0 A_JumpIfInventory("SpriteDToken", 1, "SpriteD")
			TNT1 A 0 A_JumpIfInventory("SpriteEToken", 1, "SpriteE")
			TNT1 A 0 A_JumpIfInventory("SpriteFToken", 1, "SpriteF")
			TNT1 A 0 A_JumpIfInventory("SpriteGToken", 1, "SpriteG")
			TNT1 A 0 A_JumpIfInventory("SpriteHToken", 1, "SpriteH")
			TNT1 A 0 A_JumpIfInventory("SpriteIToken", 1, "SpriteI")
			TNT1 A 0 A_JumpIfInventory("SpriteJToken", 1, "SpriteJ")
			TNT1 A 0 A_JumpIfInventory("SpriteKToken", 1, "SpriteK")
			TNT1 A 0 A_JumpIfInventory("SpriteLToken", 1, "SpriteL")
			TNT1 A 0 A_JumpIfInventory("SpriteBToken", 1, "SpriteB")
			TNT1 A 0 A_JumpIfInventory("SpriteNToken", 1, "SpriteN")
			TNT1 A 0 A_JumpIfInventory("SpriteOToken", 1, "SpriteO")
			TNT1 A 0 A_JumpIfInventory("SpritePToken", 1, "SpriteP")
			TNT1 A 0 A_JumpIfInventory("SpriteQToken", 1, "SpriteQ")
			PYLD M 1 A_Warp(AAPTR_MASTER, user_x_off, user_y_off, 0, 0, WARPF_NOCHECKPOSITION)
			Goto SpriteM+1
			
		SpriteN:
			TNT1 A 0 A_TakeInventory("SpriteNToken", 1)
			TNT1 A 0 A_JumpIfInventory("SpriteAToken", 1, "SpriteA")
			TNT1 A 0 A_JumpIfInventory("SpriteCToken", 1, "SpriteC")
			TNT1 A 0 A_JumpIfInventory("SpriteDToken", 1, "SpriteD")
			TNT1 A 0 A_JumpIfInventory("SpriteEToken", 1, "SpriteE")
			TNT1 A 0 A_JumpIfInventory("SpriteFToken", 1, "SpriteF")
			TNT1 A 0 A_JumpIfInventory("SpriteGToken", 1, "SpriteG")
			TNT1 A 0 A_JumpIfInventory("SpriteHToken", 1, "SpriteH")
			TNT1 A 0 A_JumpIfInventory("SpriteIToken", 1, "SpriteI")
			TNT1 A 0 A_JumpIfInventory("SpriteJToken", 1, "SpriteJ")
			TNT1 A 0 A_JumpIfInventory("SpriteKToken", 1, "SpriteK")
			TNT1 A 0 A_JumpIfInventory("SpriteLToken", 1, "SpriteL")
			TNT1 A 0 A_JumpIfInventory("SpriteMToken", 1, "SpriteM")
			TNT1 A 0 A_JumpIfInventory("SpriteBToken", 1, "SpriteB")
			TNT1 A 0 A_JumpIfInventory("SpriteOToken", 1, "SpriteO")
			TNT1 A 0 A_JumpIfInventory("SpritePToken", 1, "SpriteP")
			TNT1 A 0 A_JumpIfInventory("SpriteQToken", 1, "SpriteQ")
			PYLD N 1 A_Warp(AAPTR_MASTER, user_x_off, user_y_off, 0, 0, WARPF_NOCHECKPOSITION)
			Goto SpriteN+1
			
		SpriteO:
			TNT1 A 0 A_TakeInventory("SpriteOToken", 1)
			TNT1 A 0 A_JumpIfInventory("SpriteAToken", 1, "SpriteA")
			TNT1 A 0 A_JumpIfInventory("SpriteCToken", 1, "SpriteC")
			TNT1 A 0 A_JumpIfInventory("SpriteDToken", 1, "SpriteD")
			TNT1 A 0 A_JumpIfInventory("SpriteEToken", 1, "SpriteE")
			TNT1 A 0 A_JumpIfInventory("SpriteFToken", 1, "SpriteF")
			TNT1 A 0 A_JumpIfInventory("SpriteGToken", 1, "SpriteG")
			TNT1 A 0 A_JumpIfInventory("SpriteHToken", 1, "SpriteH")
			TNT1 A 0 A_JumpIfInventory("SpriteIToken", 1, "SpriteI")
			TNT1 A 0 A_JumpIfInventory("SpriteJToken", 1, "SpriteJ")
			TNT1 A 0 A_JumpIfInventory("SpriteKToken", 1, "SpriteK")
			TNT1 A 0 A_JumpIfInventory("SpriteLToken", 1, "SpriteL")
			TNT1 A 0 A_JumpIfInventory("SpriteMToken", 1, "SpriteM")
			TNT1 A 0 A_JumpIfInventory("SpriteNToken", 1, "SpriteN")
			TNT1 A 0 A_JumpIfInventory("SpriteBToken", 1, "SpriteB")
			TNT1 A 0 A_JumpIfInventory("SpritePToken", 1, "SpriteP")
			TNT1 A 0 A_JumpIfInventory("SpriteQToken", 1, "SpriteQ")
			PYLD O 1 A_Warp(AAPTR_MASTER, user_x_off, user_y_off, 0, 0, WARPF_NOCHECKPOSITION)
			Goto SpriteO+1
			
		SpriteP:
			TNT1 A 0 A_TakeInventory("SpritePToken", 1)
			TNT1 A 0 A_JumpIfInventory("SpriteAToken", 1, "SpriteA")
			TNT1 A 0 A_JumpIfInventory("SpriteCToken", 1, "SpriteC")
			TNT1 A 0 A_JumpIfInventory("SpriteDToken", 1, "SpriteD")
			TNT1 A 0 A_JumpIfInventory("SpriteEToken", 1, "SpriteE")
			TNT1 A 0 A_JumpIfInventory("SpriteFToken", 1, "SpriteF")
			TNT1 A 0 A_JumpIfInventory("SpriteGToken", 1, "SpriteG")
			TNT1 A 0 A_JumpIfInventory("SpriteHToken", 1, "SpriteH")
			TNT1 A 0 A_JumpIfInventory("SpriteIToken", 1, "SpriteI")
			TNT1 A 0 A_JumpIfInventory("SpriteJToken", 1, "SpriteJ")
			TNT1 A 0 A_JumpIfInventory("SpriteKToken", 1, "SpriteK")
			TNT1 A 0 A_JumpIfInventory("SpriteLToken", 1, "SpriteL")
			TNT1 A 0 A_JumpIfInventory("SpriteMToken", 1, "SpriteM")
			TNT1 A 0 A_JumpIfInventory("SpriteNToken", 1, "SpriteN")
			TNT1 A 0 A_JumpIfInventory("SpriteOToken", 1, "SpriteO")
			TNT1 A 0 A_JumpIfInventory("SpriteBToken", 1, "SpriteB")
			TNT1 A 0 A_JumpIfInventory("SpriteQToken", 1, "SpriteQ")
			PYLD P 1 A_Warp(AAPTR_MASTER, user_x_off, user_y_off, 0, 0, WARPF_NOCHECKPOSITION)
			Goto SpriteP+1
			
		SpriteQ:
			TNT1 A 0 A_TakeInventory("SpriteQToken", 1)
			TNT1 A 0 A_JumpIfInventory("SpriteAToken", 1, "SpriteA")
			TNT1 A 0 A_JumpIfInventory("SpriteCToken", 1, "SpriteC")
			TNT1 A 0 A_JumpIfInventory("SpriteDToken", 1, "SpriteD")
			TNT1 A 0 A_JumpIfInventory("SpriteEToken", 1, "SpriteE")
			TNT1 A 0 A_JumpIfInventory("SpriteFToken", 1, "SpriteF")
			TNT1 A 0 A_JumpIfInventory("SpriteGToken", 1, "SpriteG")
			TNT1 A 0 A_JumpIfInventory("SpriteHToken", 1, "SpriteH")
			TNT1 A 0 A_JumpIfInventory("SpriteIToken", 1, "SpriteI")
			TNT1 A 0 A_JumpIfInventory("SpriteJToken", 1, "SpriteJ")
			TNT1 A 0 A_JumpIfInventory("SpriteKToken", 1, "SpriteK")
			TNT1 A 0 A_JumpIfInventory("SpriteLToken", 1, "SpriteL")
			TNT1 A 0 A_JumpIfInventory("SpriteMToken", 1, "SpriteM")
			TNT1 A 0 A_JumpIfInventory("SpriteNToken", 1, "SpriteN")
			TNT1 A 0 A_JumpIfInventory("SpriteOToken", 1, "SpriteO")
			TNT1 A 0 A_JumpIfInventory("SpritePToken", 1, "SpriteP")
			TNT1 A 0 A_JumpIfInventory("SpriteBToken", 1, "SpriteB")
			PYLD Q 1 A_Warp(AAPTR_MASTER, user_x_off, user_y_off, 0, 0, WARPF_NOCHECKPOSITION)
			Goto SpriteQ+1
			
		Death:
			"####" "#" 0 ACS_NamedExecuteWithResult("subtractMasterDiabloIllusionVar", 1)
			Goto DeathLoop
			
		DeathLoop:
			"####" "#" 2 A_FadeOut(0.02)
			"####" "#" 0 A_Warp(AAPTR_MASTER, user_x_off, user_y_off, 0, 0, WARPF_NOCHECKPOSITION)
			Loop
	}
}

ACTOR DiabloIllusionA : DiabloIllusion {
	States {
		SpawnChild:
			TNT1 A 0 A_SetUserVar("user_x_off", 30)
			TNT1 A 0 A_SetUserVar("user_y_off", 30)
			Goto Super::SpawnLoop
	}
}

ACTOR DiabloIllusionB : DiabloIllusion {
	States {
		SpawnChild:
			TNT1 A 0 A_SetUserVar("user_x_off", 30)
			TNT1 A 0 A_SetUserVar("user_y_off", -30)
			Goto Super::SpawnLoop
	}
}

ACTOR DiabloIllusionC : DiabloIllusion {
	States {
		SpawnChild:
			TNT1 A 0 A_SetUserVar("user_x_off", -30)
			TNT1 A 0 A_SetUserVar("user_y_off", 30)
			Goto Super::SpawnLoop
	}
}

ACTOR DiabloIllusionD : DiabloIllusion {
	States {
		SpawnChild:
			TNT1 A 0 A_SetUserVar("user_x_off", -30)
			TNT1 A 0 A_SetUserVar("user_y_off", -30)
			Goto Super::SpawnLoop
	}
}

ACTOR SpriteToken : Inventory {
	Inventory.Amount 1
  Inventory.MaxAmount 1
}
ACTOR SpriteAToken : SpriteToken {}
ACTOR SpriteBToken : SpriteToken {}
ACTOR SpriteCToken : SpriteToken {}
ACTOR SpriteDToken : SpriteToken {}
ACTOR SpriteEToken : SpriteToken {}
ACTOR SpriteFToken : SpriteToken {}
ACTOR SpriteGToken : SpriteToken {}
ACTOR SpriteHToken : SpriteToken {}
ACTOR SpriteIToken : SpriteToken {}
ACTOR SpriteJToken : SpriteToken {}
ACTOR SpriteKToken : SpriteToken {}
ACTOR SpriteLToken : SpriteToken {}
ACTOR SpriteMToken : SpriteToken {}
ACTOR SpriteNToken : SpriteToken {}
ACTOR SpriteOToken : SpriteToken {}
ACTOR SpritePToken : SpriteToken {}
ACTOR SpriteQToken : SpriteToken {}