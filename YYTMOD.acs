#library "YYTMOD"
#include "zcommon.acs"
 
#define PLAYER_TID_START 1000
#define PLAYER_MAX 20
#define DISPLAYABLE_POWERUP_MAX 41
#define TEAR_STATS 7
#define TEMPORAL_POWERUPS 9

int  SV_PLAYERS_NUMBERS_2_TIDS[PLAYER_MAX];
bool ENERGY_SHIELD_RELOAD = true;
int TEARS_STATS_BY_PLAYER[PLAYER_MAX][TEAR_STATS];
str BRIMSTONE_COLOR = 0; //Para el trail que vive en Marte.
int IPECAC_FLAT_BONUS_DMG = 20;

str  SV_DISPLAYABLE_POWERUPS[DISPLAYABLE_POWERUP_MAX] = {
    "CONTGiverP000A0", "GrowthHormonesGiverP001A0", "JesusJuiceGiverP002A0", "MomsHeelsGiverP003A0", "MomsLipstickGiverP004A0", 
    "MomsUnderwearGiverP005A0", "RoidRageGiverP006A0", "SafetyPinGiverP007A0", "SynthoilGiverP008A0", "SpeedBallGiverP009A0", 
    "Magic8BallGiverP010A0", "ScrewGiverP011A0", "ToothpicksGiverP012A0", "TornPhotoGiverP013A0", "AdrenalineGiverP014A0", 
    "TwentyTwentyGiverP015A0", "ALumpOfCoalGiverP016A0", "BloodOfTheMartyrGiverP017A0", "DarkMatterGiverP018A0", "Infestation2GiverP019A0",
    "LostContactGiverP020A0", "MomsContactsGiverP021A0", "MomsEyeGiverP022A0", "MutantSpiderGiverP023A0", "PiscesGiverP024A0",
    "RubberCementGiverP025A0", "SacredHeartGiverP026A0", "SpoonBenderGiverP027A0", "TheCommonColdGiverP028A0", "TheInnerEyeGiverP029A0",
    "TheParasiteGiverP030A0", "TheWizGiverP031A0", "BackstabberGiverP032A0", "CompoundFractureGiverP033A0", "8InchNailsGiverP034A0",
    "DeathsTouchGiverP035A0", "MyReflectionGiverP036A0", "MonstrosLungGiverP037A0", "BrimstoneGiverP038A0", "FireMindGiverP039A0",
    "IpecacGiverP040A0"
};

str SV_DRAWABLE_CHARGE_BAR[40] = {
    "CHRBAR3", "CHRBAR4", "CHRBAR5", "CHRBAR6", "CHRBAR7", "CHRBAR8", "CHRBAR9", "CHRBAR10", "CHRBAR11", "CHRBAR12", "CHRBAR13", 
    "CHRBAR14", "CHRBAR15", "CHRBAR16", "CHRBAR17", "CHRBAR18", "CHRBAR19", "CHRBAR20", "CHRBAR21", "CHRBAR22", "CHRBAR23", "CHRBAR24", 
    "CHRBAR25", "CHRBAR26", "CHRBAR27", "CHRBAR28", "CHRBAR29", "CHRBAR30", "CHRBAR31", "CHRBAR32", "CHRBAR33", "CHRBAR34", "CHRBAR35", 
    "CHRBAR36", "CHRBAR37", "CHRBAR38", "CHRBAR39", "CHRBAR40", "CHRBAR41", "CHRBAR42"
};

str SV_TEMPORAL_POWERUPS[TEMPORAL_POWERUPS] = {
    "RubberCementGiver", "SacredHeartGiver", "SpoonBenderGiver", "TheParasiteGiver", "CompoundFractureGiver", "MonstrosLungGiver", "BrimstoneGiver",
    "FireMindGiver", "IpecacGiver"
};

script "yytmod_mensajesalida" DEATH
{
    int yyt_mensaje = random(1,3);
    switch(yyt_mensaje)
    {
        case 1:
        print(s:"No papu, asi no!");
        break;
 
        case 2:
        print(s:"Sos la cara de la verga.");
        break;
 
        case 3:
        print(s:"Ah listo...");
        break;
    }
}

script 2 (int value)
{
    SetActorProperty(0,APROP_Damage,value);
}

// Player Information Script
script 331 (void) NET CLIENTSIDE {
    Log(s:"Current player Number: ", i:PlayerNumber());
    Log(s:"Current player TID: ", i:ActivatorTID());
    Log(s:"Player list: ");

    for (int i=0; i<PLAYER_MAX; i++) {
        Log(s:"Player ", i:i, s:": TID -> ", i:SV_PLAYERS_NUMBERS_2_TIDS[i]);
    }
}

// Actor Information Script (solo para debugs)
script "printMyPointers" (void) {
    log(s:"MASTER: ", i:GetActorProperty(0, APROP_MasterTID));
    log(s:"TARGET: ", i:GetActorProperty(0, APROP_TargetTID));
    log(s:"TRACER: ", i:GetActorProperty(0, APROP_TracerTID));
    log(s:"X: ", f:GetActorX(0));
    log(s:"Y: ", f:GetActorY(0));
    log(s:"Z: ", f:GetActorZ(0));
}

script 332 OPEN {
    //Translations

    //Tears
    CreateTranslation (2, 128:225=[0,0,0]:[24,13,2], 3:4=[0,0,0]:[24,13,2], 80:96=[0,0,0]:[24,13,2]); // A Lump of Coal
    CreateTranslation (3, 192:193=[0,0,0]:[238,25,34], 194:197=[0,0,0]:[158,6,12], 3:4=[0,0,0]:[158,6,12], 80:96=[0,0,0]:[158,6,12]); // Blood of the Martyr
    CreateTranslation (4, 192:193=[0,0,0]:[42,42,42], 194:224=[0,0,0]:[23,23,23], 3:4=[0,0,0]:[42,42,42], 80:96=[0,0,0]:[23,23,23]); // Dark Matter
    CreateTranslation (6, 128:225=[0,0,0]:[179,26,60], 3:4=[0,0,0]:[179,26,60], 80:96=[0,0,0]:[179,26,60]); // Moms Contact
    CreateTranslation (8, 192:193=[0,0,0]:[214,215,223], 194:197=[0,0,0]:[199,225,230], 3:4=[0,0,0]:[214,215,223], 80:96=[0,0,0]:[199,225,230]); // Sacred Heart
    CreateTranslation (9, 192:193=[0,0,0]:[122,38,158], 194:197=[0,0,0]:[111,32,155], 198:224=[0,0,0]:[97,19,146], 3:4=[0,0,0]:[122,38,158], 80:96=[0,0,0]:[111,32,155]); // Spoon Bender
    CreateTranslation (10, 192:193=[0,0,0]:[83,115,168], 194:197=[0,0,0]:[81,116,174], 198:224=[0,0,0]:[76,115,178], 3:4=[0,0,0]:[83,115,168], 80:96=[0,0,0]:[81,116,174]); // Lost Contact
    CreateTranslation (11, 128:225=[0,0,0]:[85,154,117], 3:4=[0,0,0]:[85,154,117], 80:96=[0,0,0]:[85,154,117]); // The Common Cold
    CreateTranslation (13, 192:193=[0,0,0]:[187,98,69], 194:197=[0,0,0]:[154,78,40], 198:224=[0,0,0]:[128,71,43], 3:4=[0,0,0]:[187,98,69], 80:96=[0,0,0]:[154,78,40]); // The Parasite
    CreateTranslation (20, 192:193=[0,0,0]:[255,148,73], 194:197=[0,0,0]:[239,104,11], 198:224=[0,0,0]:[218,95,10], 3:4=[0,0,0]:[255,148,73], 80:96=[0,0,0]:[239,104,11]); // Fire Mind
    CreateTranslation (21, 192:193=[0,0,0]:[119,136,89], 194:197=[0,0,0]:[140,176,109], 198:224=[0,0,0]:[202,239,190], 3:4=[0,0,0]:[119,136,89], 80:96=[0,0,0]:[140,176,109]); // Ipecac

    //Red Beams
    CreateTranslation (14, 16:47=[0,0,0]:[64,36,4], 169:191=[0,0,0]:[64,36,4]); // A Lump of Coal
    CreateTranslation (15, 16:47=[0,0,0]:[13,83,233], 169:191=[0,0,0]:[13,83,233]); // Lost Contact
    CreateTranslation (16, 16:47=[0,0,0]:[13,233,83], 169:191=[0,0,0]:[13,233,83]); // The Common Cold
    CreateTranslation (17, 16:47=[0,0,0]:[158,158,158], 169:191=[0,0,0]:[158,158,158]); // Sacred Heart
    CreateTranslation (18, 16:47=[0,0,0]:[205,13,233], 169:191=[0,0,0]:[205,13,233]); // Spoon Bender
    CreateTranslation (19, 16:47=[0,0,0]:[233,131,13], 169:191=[0,0,0]:[233,131,13]); // The Parasite
}

Script 333 (void) NET {
    GiveInventory("WeaponSpecialAction", 1);
}
 
script "setEnergyShieldReload" (int flag) {
    ENERGY_SHIELD_RELOAD = flag;
}
 
script 335 ENTER {
    ACS_ExecuteAlways(338, 0);

    int pnum = PlayerNumber();
    int classNum = PlayerClass(pnum);
    if (classNum == 0) {
        ACS_NamedExecuteAlways("loadTearStatsData", 0, pnum);

        for (int i; i<TEMPORAL_POWERUPS; i++) {
            if (CheckInventory(SV_TEMPORAL_POWERUPS[i])) {
                TakeInventory(SV_TEMPORAL_POWERUPS[i], 1);
            }
        }
                
        while (true) {
            if (ENERGY_SHIELD_RELOAD) {
                GiveInventory("EnergyShieldAmmo",1);
                Delay(1);
            }
            Delay(1);
        }
    }
}
 
script 336 DEATH {
    int classNum = PlayerClass(PlayerNumber());
    if (classNum == 0) {
        ACS_NamedExecuteAlways("resetTearStats", 0);

        if (CheckInventory("DarkMatterGiver")) {
            TakeInventory("BlackIsaacHands", 1);
            GiveInventory("IsaacHands", 1);
        }

        if (CheckInventory("FireMindGiver")) {
            TakeInventory("OrangeIsaacHands", 1);
            if (!CheckInventory("IsaacHands")) GiveInventory("IsaacHands", 1);
        }

        if (CheckInventory("IpecacGiver")) {
            TakeInventory("GreenIsaacHands", 1);
            if (!CheckInventory("IsaacHands")) GiveInventory("IsaacHands", 1);
        }

        if (CheckInventory("BrimstoneGiver")) {
            TakeInventory("BrimstoneHands", 1);
            if (!CheckInventory("IsaacHands")) GiveInventory("IsaacHands", 1);
        }

        for (int i=0; i<DISPLAYABLE_POWERUP_MAX; i++) {
            TakeInventory(StrLeft(SV_DISPLAYABLE_POWERUPS[i], StrLen(SV_DISPLAYABLE_POWERUPS[i])-6), 1);
        }
    }

    SV_PLAYERS_NUMBERS_2_TIDS[PlayerNumber()] = 0;
    Thing_ChangeTID(PLAYER_TID_START+PlayerNumber(), 0);
}
 
script 337 RESPAWN {
    ACS_ExecuteAlways(338, 0);
}
 
script 338 (void) {
    int playerNum = PlayerNumber();
    int newTID = playerNum + PLAYER_TID_START;
    SV_PLAYERS_NUMBERS_2_TIDS[playerNum] = newTID;
    Thing_ChangeTID(0, newTID);
}
 
script "isMasterPressingAltFire" (void) {
    int playerTID = GetActorProperty(0, APROP_MasterTID);
    int playerNum = ACS_NamedExecuteWithResult("getPlayerNumberFromTID", playerTID); 
    int buttons = GetPlayerInput(playerNum, INPUT_BUTTONS);
 
    SetResultValue(buttons & BT_ALTATTACK);
}

script "getPlayerNumberFromTID" (int ptid) {
    for (int i=0; i<PLAYER_MAX; i++) {
 
        if (SV_PLAYERS_NUMBERS_2_TIDS[i] == ptid) {
            SetResultValue(i);
            break;
        }
    }
}

//Hago estas dos funciones porque los jumps de decorate son una cagada
script "checkForNoAmmoInInventory" (int choice) {
    switch(choice) {
        case 1: {
            SetResultValue(CheckInventory("EnergyShieldAmmo") == 0);
        }; break;
    }
}

script "checkForNoAmmoInPointerInventory" (int choice) {
    switch(choice) {
        case 1: {
            int ptid = GetActorProperty(0, APROP_MasterTID);
            SetResultValue(CheckActorInventory(ptid, "EnergyShieldAmmo") == 0);
        }; break;
    }
}

script "loadChargedAttack" (int fullyCharged) {
    SetUserVariable(0, "user_charge_state", 0);
    int progressFactor = 40.0 / fullyCharged;
    int playFeedbackSound = 1;
    int chargedTime, progressC;
    ACS_NamedExecuteWithResult("displayChargeBar", 1);

    while (ACS_NamedExecuteWithResult("isPressingFire")) {
        progressC = (progressFactor * chargedTime) >> 16;
        ACS_NamedExecuteWithResult("showProgressChargeBar", progressC);

        if (chargedTime < fullyCharged) chargedTime++;
        else {
            if (playFeedbackSound) {
                PlaySound(0, "agge/charged", CHAN_AUTO);
                playFeedbackSound = 0;
            }
        }
        Delay(1);
    }

    ACS_NamedExecuteWithResult("displayChargeBar", 0);
    if (chargedTime == fullyCharged) SetUserVariable(0, "user_charge_state", 1);
    else SetUserVariable(0, "user_charge_state", 2);
}

script "stopAndPositionPlayer" (void) {
    ACS_NamedExecuteWithResult("pausePlayer", 1);
    SetActorPitch(0, 0.1);
}

script "displayChargeBar" (int isOn) CLIENTSIDE {
    if (isOn) {
        SetFont("CHRBAR1");
        HudMessage(s:"A"; HUDMSG_PLAIN, 2, 0, 0.01, 0.01, 0);
    }
    else {
        HudMessage(s:""; HUDMSG_PLAIN, 2, 0, 0, 0, 1);
        HudMessage(s:""; HUDMSG_PLAIN, 1, 0, 0, 0, 1);
    }
}

script "showProgressChargeBar" (int entry) CLIENTSIDE {
    SetFont(SV_DRAWABLE_CHARGE_BAR[entry]);
    HudMessage(s:"A"; HUDMSG_PLAIN, 1, 0, 0.013, 0.013, 0);
}

script "pausePlayer" (int activeFlag) {
    if (activeFlag) {
        Thing_Stop(0);
        SetPlayerProperty(0, activeFlag, PROP_TOTALLYFROZEN);
    }
    else SetPlayerProperty(0, activeFlag, PROP_TOTALLYFROZEN);
}

script "getChargeState" (void) {
    int chargeState = GetUserVariable(0, "user_charge_state");
    SetResultValue(chargeState);
}

script "isPressingFire" (void) {
    int buttons = GetPlayerInput(PlayerNumber(), INPUT_BUTTONS);
    SetResultValue(buttons & BT_ATTACK);
}

// codigo escopeta terro
// COMIENZO
script 891 (void)
{
    while(checkinventory("SynthFireActive")>0)
    {       
        if(getplayerinput(PlayerNumber(), INPUT_BUTTONS) & BT_ATTACK)
        {
            giveinventory("SynthFireLeft",1);
            while(checkinventory("SynthFireLeft">0) || getplayerinput(PlayerNumber(), INPUT_BUTTONS) & BT_ATTACK) { delay(1); }
            takeinventory("SynthFireLeft",1);
        }
        delay(1);
    }
}

// Right (secondary) weapon.
script 892 (void)
{
    while(CheckInventory("SynthFireActive")>0)
    {
        if(GetPlayerInput(PlayerNumber(), INPUT_BUTTONS) & BT_ALTATTACK)
        {
            GiveInventory("SynthFireRight",1);
            while(GetPlayerInput(PlayerNumber(), INPUT_BUTTONS) & BT_ALTATTACK) { delay(1); }
            TakeInventory("SynthFireRight",1);
        }
        delay(1);
    }
}
// FIN

script "setDamageBoostPerTime" (int boost, int tics, int maxi) {
    // Prerequisito: El actor que llama al script tiene que tener user_deadflag.
    for (int i=0; i<maxi; i++) {
        Delay(tics);
        if (GetUserVariable(0, "user_deadflag")) { terminate; }
        int newDmg = GetActorProperty(0, APROP_Damage) + boost;
        SetActorProperty(0, APROP_Damage, newDmg);
    }
}

script "isEffectChanceSuccessful" (int chance) {
    int res = Random(1, 100);
    SetResultValue(res <= chance);
}

// Obligado a usar switch a causa de que ACS no se banca otras variables que
// no sean int como parametros y que admite una cantidad limitada de ellos
script "applyEffect" (int option, int dur, int force) {
    int mtid, ptid, times, i;
    switch(option) {
        case 1: {
            // Fear: El enemigo huye del jugador pero tiene chance de contraatacar en medio
            mtid = UniqueTID();
            int ftid = UniqueTID();

            Thing_ChangeTID(0, mtid);
            Spawn("FearEffect", GetActorX(0), GetActorY(0), GetActorZ(0), ftid);
            SetActivator(ftid);
            SetPointer(AAPTR_TRACER, mtid);
            SetUserVariable(0, "user_se_monster_height", GetActorProperty(mtid, APROP_Height) >> 16);
            SetActivator(mtid);
            Thing_ChangeTID(mtid, 0);
            SetActorProperty(0, APROP_Frightened, 1);
            Delay(dur);
            SetActorProperty(0, APROP_Frightened, 0);
            TakeInventory("FearDebuffGiver", 1);
            SetActorState(ftid, "Death");
            Thing_ChangeTID(ftid, 0);
        }; break;
        case 2: {
            // Araña aliada
            while(GetActorProperty(0, APROP_Health) > 0.0) { Delay(1); }
            Spawn("FriendlyMiniArachnotron", GetActorX(0), GetActorY(0), GetActorZ(0));
        }; break;
        case 3: {
            // Petrifying: no puede atacar ni moverse pero tampoco se le puede hacer daño
            mtid = UniqueTID();
            ptid = UniqueTID();

            Thing_ChangeTID(0, mtid);
            Spawn("PetrifyingEffect", GetActorX(0), GetActorY(0), GetActorZ(0), ptid);
            SetActivator(ptid);
            SetPointer(AAPTR_TRACER, mtid);
            SetUserVariable(0, "user_se_monster_height", GetActorProperty(mtid, APROP_Height) >> 16);
            SetActivator(mtid);
            Thing_ChangeTID(mtid, 0);
            Thing_Deactivate(0);
            Delay(dur);
            Thing_Activate(0);
            TakeInventory("PetrifyingDebuffGiver", 1);
            SetActorState(ptid, "Death");
            Thing_ChangeTID(ptid, 0);
        }; break;
        case 4: {
            // Knock-back
            SetActivator(GetActorProperty(0, APROP_TracerTID));
            int angle = GetActorAngle(0) >> 8;
            if (angle < 128) angle = angle + 128; else angle = angle - 128;
            ThrustThing(angle, force, 0, 0);
        }; break;
        case 5: {
            // Poison hace el daño de la lágrima al monstruo cada 2 segundos una X cantidad de veces
            times = dur / 35;
            int poisonDmg;
            if (CheckFlag(0, "ISMONSTER")) {
                poisonDmg = 7; // Se pierde la relación con el damage dealer
            }
            else {
                poisonDmg = GetActorProperty(0, APROP_Damage);
                if (!SetActivator(0, AAPTR_TRACER)) { break; }
            }

            mtid = UniqueTID();
            ptid = UniqueTID();

            Thing_ChangeTID(0, mtid);
            Spawn("PoisonEffect", GetActorX(0), GetActorY(0), GetActorZ(0), ptid);
            SetActivator(ptid);
            SetPointer(AAPTR_TRACER, mtid);
            SetUserVariable(0, "user_se_monster_height", GetActorProperty(mtid, APROP_Height) >> 16);
            SetActivator(mtid);
            Thing_ChangeTID(mtid, 0);
            for (i=0; i<times; i++) {
                Thing_Damage2(0, poisonDmg, "Poison");
                Delay(70);
            }

            SetActorState(ptid, "Death");
            TakeInventory("PoisonDebuffGiver", 1);
            Thing_ChangeTID(ptid, 0);
        }; break;
        case 6: {
            // Bleeding hace 10% de su salud maxima de daño al monstruo cada 5 segundos y no tiene limite de tiempo.
            // Importante: No debe afectar a monstruos tipo BOSSES.
            mtid = UniqueTID();
            int btid = UniqueTID();

            Thing_ChangeTID(0, mtid);
            Spawn("BleedingEffect", GetActorX(0), GetActorY(0), GetActorZ(0), btid);
            SetActivator(btid);
            SetPointer(AAPTR_TRACER, mtid);
            SetUserVariable(0, "user_se_monster_height", GetActorProperty(mtid, APROP_Height) >> 16);
            SetActivator(mtid);
            Thing_ChangeTID(mtid, 0);

            while (GetActorProperty(0, APROP_Health) > 0.0) {
                Thing_Damage2(0, multiplyValue(GetUserVariable(0, "user_max_healh"), 0.1), "Bleeding");
                Delay(175);
            }

            SetActorState(btid, "Death");
            TakeInventory("BleedingDebuffGiver", 1);
            Thing_ChangeTID(btid, 0);
        }; break;
        case 7: {
            // Daño añadido por distancia recorrida (solo usable por laseres)
            // +20% daño cada 300 espacios
            ptid = GetActorProperty(0, APROP_TargetTID);
            int distance = fdistance(0, ptid);
            int factor = distance / 300 >> 16;
            if (factor > 0) {
                int addDmg = (GetActorProperty(0, APROP_Damage) * (20 * factor)) / 100;
                if (SetActivator(0, AAPTR_TRACER)) Thing_Damage2(0, addDmg, "None");
            }
        }; break;
        case 8: {
            // Burn hace el daño de la lágrima cada segundo durante toda su duración
            times = dur / 35;
            int burnDmg = GetActorProperty(0, APROP_Damage);
            if (SetActivator(0, AAPTR_TRACER)) {
                mtid = UniqueTID();
                ptid = UniqueTID();

                Thing_ChangeTID(0, mtid);
                Spawn("BurnEffect", GetActorX(0), GetActorY(0), GetActorZ(0), ptid);
                SetActivator(ptid);
                SetPointer(AAPTR_TRACER, mtid);
                SetUserVariable(0, "user_se_monster_height", GetActorProperty(mtid, APROP_Height) >> 16);
                SetActivator(mtid);
                Thing_ChangeTID(mtid, 0);
                for (i=0; i<times; i++) {
                    Thing_Damage2(0, burnDmg, "FireRF");
                    Delay(35);
                }

                SetActorState(ptid, "Death");
                TakeInventory("BurnDebuffGiver", 1);
                Thing_ChangeTID(ptid, 0);
            }
        }; break;
    }
}

script "applyEffectOnPlayer" (int option, int duration, int arg2) {
    // Efectos de los monstruos al jugador
    // NOTA: Puede pasar que un monstruo le pegue a otro en el medio, ese caso se tiene en cuenta
    // arg2, etc. son comodines
    switch(option) {
        case 1: {
            int ptid = GetActorProperty(0, APROP_TracerTID);
            int poisonDmg = GetActorProperty(0, APROP_Damage);
            if (poisonDmg > 10000) poisonDmg = Random(0, 1);
            int lapse = duration / arg2;
            if (SetActivator(0, AAPTR_TRACER)) {
                if (!ptid) {
                    int mtid = UniqueTID();
                    Thing_ChangeTID(0, mtid);
                }

                int ntid = UniqueTID();
                Spawn("PoisonEffect", GetActorX(0), GetActorY(0), GetActorZ(0), ntid);
                SetActivator(ntid);
                if (ptid) {
                    SetPointer(AAPTR_TRACER, ptid);
                    SetUserVariable(0, "user_se_monster_height", GetActorProperty(ptid, APROP_Height) >> 16);
                    SetActivator(ptid);
                }
                else {
                    SetPointer(AAPTR_TRACER, mtid);
                    SetUserVariable(0, "user_se_monster_height", GetActorProperty(mtid, APROP_Height) >> 16);
                    SetActivator(mtid);
                    Thing_ChangeTID(mtid, 0);
                }

                for (int i=0; i<arg2; i++) {
                    Thing_Damage2(0, poisonDmg, "Poison");
                    Delay(lapse);
                }

                SetActorState(ntid, "Death");
                TakeInventory("PoisonCounter", 1);
                Thing_ChangeTID(ntid, 0);
            }
        }; break;
    }
}

script "showTranslation" (int option) CLIENTSIDE {
    Thing_SetTranslation(0, option);
}

script "deathTimer" (int tics) {
    Delay(tics);
    SetActorState(0, "Death");
}

script "getUniqueTID" (void) {
    SetResultValue(UniqueTID());
}

script "shellsLeft" (void) {
    SetResultValue(CheckInventory("ShellsLeft"));
}

script "shells" (void) {
    SetResultValue(CheckInventory("Shell"));
}

script "targetLoopFlags" (void) {
    int ptid = GetActorProperty(0, APROP_TargetTID);
    SetResultValue(CheckActorInventory(ptid, "LoopFlag"));
}

function int fdistance (int tid1, int tid2) {
    int len;
    int y = GetActorY(tid1) - GetActorY(tid2);
    int x = GetActorX(tid1) - GetActorX(tid2);
    int z = GetActorZ(tid1) - GetActorZ(tid2);

    int ang = VectorAngle(x,y);
    if (((ang+0.125)%0.5) > 0.25) len = FixedDiv(y, sin(ang));
    else len = FixedDiv(x, cos(ang));

    ang = VectorAngle(len, z);
    if (((ang+0.125)%0.5) > 0.25) len = FixedDiv(z, sin(ang));
    else len = FixedDiv(len, cos(ang));

    return len;
}

script "setChildrenStats" (int ctid) {
    int masterDmg = GetActorProperty(0, APROP_Damage);
    SetUserVariable(ctid, "user_explosion_damage", masterDmg);
    if (CheckActorInventory(GetActorProperty(0, APROP_TargetTID), "IpecacGiver")) {
        if (CheckActorClass(0, "IsaacEffectPuff") ||
            CheckActorClass(0, "PiercingDamageDealer") ||
            CheckActorClass(0, "BrimstoneBeam")) {
            int ptid = GetActorProperty(0, APROP_TargetTID);
            if (!ptid) {
                int ttid = UniqueTID();
                Thing_ChangeTID(0, ttid);
                SetActivator(0, AAPTR_TARGET);
                ptid = GetActorProperty(0, APROP_MasterTID);
                if (!ptid) {
                    SetActivator(0, AAPTR_MASTER);
                    ptid = GetActorProperty(0, APROP_TargetTID);
                }
                SetActivator(ttid);
                Thing_ChangeTID(ttid, 0);
            }
            int pnum = ACS_NamedExecuteWithResult("getPlayerNumberFromTID", ptid); 
            ACS_NamedExecuteAlways("setExplosionRange", 0, TEARS_STATS_BY_PLAYER[pnum][5]);
        }
        int masterFMFlag = CheckActorInventory(GetActorProperty(0, APROP_TargetTID), "FireMindGiver");
        SetUserVariable(ctid, "user_fire_flag", masterFMFlag);
        int masterExplRange = GetUserVariable(0, "user_explosion_range");
        SetUserVariable(ctid, "user_explosion_range", masterExplRange);
    }
}

script "setPlayerLight" (int isOn) {
    if (!GetUserVariable(0, "user_player_light_tid")) {
        SetUserVariable(0, "user_player_light_tid", UniqueTID());
    }
    int utid = GetUserVariable(0, "user_player_light_tid");
    int ptid = ActivatorTID();

    if (isOn) {
        if (ThingCount(T_NONE, utid) > 0) terminate;
        Spawn("LightFollower", GetActorX(0), GetActorY(0), GetActorZ(0), utid);
        SetActivator(utid);
        SetPointer(AAPTR_TRACER, ptid);
        SetUserVariable(0, "user_se_monster_height", GetActorProperty(ptid, APROP_Height) >> 16);
    }
    else {
        SetActorState(utid, "Death");
        Thing_ChangeTID(utid, 0);
    }
}

script "killIfPlayerIsDead" (void) {
    int ptid = GetActorProperty(0, APROP_TracerTID);
    if (!ptid) SetActorState(0, "Death");
}

script "getTargetRadius" (void) {
    if (SetActivator(0, AAPTR_TARGET)) {
        SetResultValue(GetActorProperty(0, APROP_Radius));
    }
    else log(s:"Doesnt work");
}







/************************
*   ARMA 4 CLASE AGGE   
************************/

/*
** FUNCIONES DE BASE DE DATOS
*/

// La intención es usar la DB para mantener el progreso de los stats IN-GAME. Por ahora, no
// hay planes de dejar persistida la data una vez se cierra el server.
str TEARS_STATS_TABLE[TEAR_STATS] = {
    "0Radius", "1Height", "2Damage", "3Range", "4Speed Boost", "5Scale", "6Fire Rate Boost"
};

script "saveTearStatsData" (void) {
    int i, j;
    str pName;
    BeginDBTransaction();
    for (i=0; i<PLAYER_MAX; i++) {
        if (TEARS_STATS_BY_PLAYER[i][0] == 0) { continue; }
        pName = StrParam(s:"Player", d:i);
        for (j=0; j<TEAR_STATS; j++) {
            SetDBEntry(pName, TEARS_STATS_TABLE[j], TEARS_STATS_BY_PLAYER[i][j]);
        }
    }
    EndDBTransaction();
}

script "loadTearStatsData" (int pnum) {
    int i;

    str pName = StrParam(s:"Player", d:pnum);
    int tearStats = GetDBEntries(pName);

    if (CountDBResults(tearStats) == 0) {
        ACS_NamedExecuteAlways("resetTearStats", 0);
        FreeDBResults(tearStats);
        terminate;
    }

    for (i=0; i<TEAR_STATS; i++) {
        TEARS_STATS_BY_PLAYER[pnum][i] = GetDBResultValue(tearStats, i);
        if (IsNetworkGame()) ACS_NamedExecuteAlways("sendToClient", 0, pnum, i, TEARS_STATS_BY_PLAYER[pnum][i]);
    }

    FreeDBResults(tearStats);
}

script "homingAtNegativeZVelocity" (void) {
    int velz;
    while (velz >= 0) {
        velz = GetActorVelZ(0);
        Delay(1);
    }

    int ttid = UniqueTID();
    Thing_ChangeTID(0, ttid);
    SetActivatorToTarget(0);
    int ptid = GetActorProperty(0, APROP_TargetTID);
    SetActivator(ttid);
    // Si es un monstruo no interesa que sea target
    if (ptid) SetPointer(AAPTR_TRACER, ptid);
    SetUserVariable(0, "user_homing_flag", 1);
    Thing_ChangeTID(ttid, 0);
}







/*
** COMPORTAMIENTO Y STATS DEL ARMA
*/

// Tear Stats Information Script
script 334 (void) NET CLIENTSIDE {
    int pnum = PlayerNumber();
    Log(s:"Radius: ", i:TEARS_STATS_BY_PLAYER[pnum][0]);
    Log(s:"Height: ", i:TEARS_STATS_BY_PLAYER[pnum][1]);
    Log(s:"Damage: ", i:TEARS_STATS_BY_PLAYER[pnum][2]);
    Log(s:"Range: ", i:TEARS_STATS_BY_PLAYER[pnum][3]);
    Log(s:"Speed Boost: ", i:TEARS_STATS_BY_PLAYER[pnum][4]);
    Log(s:"Scale: ", i:TEARS_STATS_BY_PLAYER[pnum][5]);
    Log(s:"Fire Rate Boost: ", i:TEARS_STATS_BY_PLAYER[pnum][6]);
}

script 330 UNLOADING {
    ACS_NamedExecuteAlways("saveTearStatsData", 0);
}

script "resetTearStats" (void) {
    int pnum = PlayerNumber();

    // Radius y height no se pueden cambiar en zandro 3.0
    TEARS_STATS_BY_PLAYER[pnum][0] = 2;  //Radius
    TEARS_STATS_BY_PLAYER[pnum][1] = 3;  //Height
    TEARS_STATS_BY_PLAYER[pnum][2] = 2;  //Damage
    TEARS_STATS_BY_PLAYER[pnum][3] = 35; //Range (en tics)
    TEARS_STATS_BY_PLAYER[pnum][4] = 0;  //Speed Boost
    TEARS_STATS_BY_PLAYER[pnum][5] = 1;  //Scale
    TEARS_STATS_BY_PLAYER[pnum][6] = 1;  //Fire Rate Boost

    if (IsNetworkGame()) {
        for (int i=0; i<TEAR_STATS; i++) {
            ACS_NamedExecuteAlways("sendToClient", 0, pnum, i, TEARS_STATS_BY_PLAYER[pnum][i]);
        }
    }
}

script "sendToClient" (int pnumber, int entry, int val) CLIENTSIDE {
    TEARS_STATS_BY_PLAYER[pnumber][entry] = val;
}

script "addTearBoost" (int boostType, int bonus) {
    int pnum = PlayerNumber();
    TEARS_STATS_BY_PLAYER[pnum][boostType] = TEARS_STATS_BY_PLAYER[pnum][boostType] + bonus;
    if (boostType == 6 && TEARS_STATS_BY_PLAYER[pnum][boostType] < 1) { TEARS_STATS_BY_PLAYER[pnum][boostType] = 1; }
    if (IsNetworkGame()) {
        ACS_NamedExecuteAlways("sendToClient", 0, pnum, boostType, TEARS_STATS_BY_PLAYER[pnum][boostType]);
    }

    if (GetUserVariable(0, "user_isaac_hands_is_active")) ACS_NamedExecuteAlways("showStats", 0, 1);
}

script "setTearStats" (void) {
    int ptid = GetActorProperty(0, APROP_TargetTID);
    int pnum = ACS_NamedExecuteWithResult("getPlayerNumberFromTID", ptid); 
    ACS_NamedExecuteAlways("setRadius", 0, TEARS_STATS_BY_PLAYER[pnum][0]);
    ACS_NamedExecuteAlways("setHeight", 0, TEARS_STATS_BY_PLAYER[pnum][1]);
    ACS_NamedExecuteAlways("setDamage", 0, TEARS_STATS_BY_PLAYER[pnum][2], ptid);
    ACS_NamedExecuteAlways("setRange", 0, TEARS_STATS_BY_PLAYER[pnum][3], ptid);
    ACS_NamedExecuteAlways("setSpeed", 0, TEARS_STATS_BY_PLAYER[pnum][4], ptid);
    ACS_NamedExecuteAlways("setScale", 0, TEARS_STATS_BY_PLAYER[pnum][5]);

    if (CheckActorInventory(ptid, "ALumpOfCoalGiver")) {
        Thing_SetTranslation(0, 2);
        ACS_NamedExecuteAlways("setDamageBoostPerTime", 0, 1, 35, 10);
    }

    if (CheckActorClass(0, "NormalTearProjectile") ||
        CheckActorClass(0, "MonstroTearProjectile") ||
        CheckActorClass(0, "BouncingTearProjectile") ||
        CheckActorClass(0, "MonstroBouncingTearProjectile")) {
        if (CheckActorInventory(ptid, "BloodOfTheMartyrGiver")) Thing_SetTranslation(0, 3);
        if (CheckActorInventory(ptid, "LostContactGiver")) Thing_SetTranslation(0, 10);
        if (CheckActorInventory(ptid, "SacredHeartGiver")) Thing_SetTranslation(0, 8);
        if (CheckActorInventory(ptid, "SpoonBenderGiver")) Thing_SetTranslation(0, 9);
        if (CheckActorInventory(ptid, "TheParasiteGiver")) Thing_SetTranslation(0, 13);
    }
}

script "setRadius" (int radius) {
    SetActorProperty(0, APROP_Radius, radius << 16);
}

script "setHeight" (int hgt) {
    SetActorProperty(0, APROP_Height, hgt << 16);
}

script "setDamage" (int damage, int ptid) {
    damage = applyGiversToDamage(damage, ptid);
    SetActorProperty(0, APROP_Damage, damage);
}

function int applyGiversToDamage(int damage, int ptid) {
    if (CheckActorInventory(ptid, "SacredHeartGiver")) {
        damage = multiplyValue(damage, 2.3);
    }

    if (CheckActorInventory(ptid, "AdrenalineGiver") && GetActorProperty(ptid, APROP_Health) <= 100) {
        damage = damage + (2 * ((GetActorProperty(ptid, APROP_Health) - 100) / -10)); // +2 damage cada -10 de HP, máximo +18 con menos de 10 HP
    }

    if (CheckActorInventory(ptid, "TwentyTwentyGiver")) {
        damage = multiplyValue(damage, 0.75);
    }

    // Flat damage siempre se aplica al final luego de todos los multipliers
    if (CheckActorInventory(ptid, "IpecacGiver")) {
        if (CheckActorInventory(ptid, "BrimstoneGiver")) damage = damage + 2;
        else damage = damage + IPECAC_FLAT_BONUS_DMG;
    }

    return damage;
}

function int multiplyValue(int value, int multiplier) {
    // Multiplica (o divide) a value.
    // value es un integer y multiplier es un fixed number.
    // Se randomiza el redondeo de float->integer en base a la parte decimal del float.
    // Ej: 0.5 tiene 50% chance de redondear a 1 y 50% chance de redondear a 0.
    int dmgCutDec = (multiplier * value) & 0x0000FFFF;
    int rand = Random(0x00000000, 0x0000FFFF);
    if (dmgCutDec <= rand) value = ((multiplier * value) >> 16);
    else value = ((multiplier * value) >> 16) + 1;

    return value;
}

script "setRange" (int range, int ptid) {
    if (CheckActorInventory(ptid, "MyReflectionGiver") == 1) {
        range = multiplyValue(range, 1.6);
    }

    while (range > 0) {
        if (GetUserVariable(0, "user_deadflag")) terminate;

        range--;
        SetUserVariable(0, "user_remaining_range", range);
        Delay(1);
    }

    ThrustThingZ(0, 15, 1, 0);
    SetUserVariable(0, "user_deadflag", 1);
    SetActorState(0, "DeathEnd");
}

script "setSpeed" (int boost, int ptid) {
    if (CheckActorInventory(ptid, "MyReflectionGiver") == 1) boost = multiplyValue(boost, 1.6);

    if (boost != 0) {
        int newVelX = ((GetActorVelX(0) * boost) / 100) + GetActorVelX(0);
        int newVelY = ((GetActorVelY(0) * boost) / 100) + GetActorVelY(0);
        int newVelZ = ((GetActorVelZ(0) * boost) / 100) + GetActorVelZ(0);
        SetActorVelocity(0, newVelX, newVelY, newVelZ, false, false);
    }
}

// Al ser algo puramente visual queda del lado del cliente
script "setScale" (int scale) CLIENTSIDE {
    if (scale < 1) scale = 1;
    switch(scale) {
        case 1: {
            SetActorProperty(0, APROP_ScaleX, 0.125);
            SetActorProperty(0, APROP_ScaleY, 0.125);
        }; break;
        case 2: {
            SetActorProperty(0, APROP_ScaleX, 0.25);
            SetActorProperty(0, APROP_ScaleY, 0.25);
        }; break;
        case 3: {
            SetActorProperty(0, APROP_ScaleX, 0.375);
            SetActorProperty(0, APROP_ScaleY, 0.375);
        }; break;
        case 4: {
            SetActorProperty(0, APROP_ScaleX, 0.5);
            SetActorProperty(0, APROP_ScaleY, 0.5);
        }; break;
        case 5: {
            SetActorProperty(0, APROP_ScaleX, 0.625);
            SetActorProperty(0, APROP_ScaleY, 0.625);
        }; break;
        case 6: {
            SetActorProperty(0, APROP_ScaleX, 0.75);
            SetActorProperty(0, APROP_ScaleY, 0.75);
        }; break;
        case 7: {
            SetActorProperty(0, APROP_ScaleX, 0.875);
            SetActorProperty(0, APROP_ScaleY, 0.875);
        }; break;
        case 8: {
            SetActorProperty(0, APROP_ScaleX, 1.0);
            SetActorProperty(0, APROP_ScaleY, 1.0);
        }; break;
    }
}

script "getFireRateBoost" (void) {
    int boost = TEARS_STATS_BY_PLAYER[PlayerNumber()][6];
    if (CheckInventory("IpecacGiver") && CheckInventory("BrimstoneGiver")) {
        boost = boost+3;
    }
    SetResultValue(boost);
}

script "showPowerups" (int displayFlag) CLIENTSIDE {
    for (int i=1; i<=DISPLAYABLE_POWERUP_MAX; i++) {
        if (displayFlag) {
            SetFont(StrRight(SV_DISPLAYABLE_POWERUPS[i-1], 6));
            if (CheckInventory(StrLeft(SV_DISPLAYABLE_POWERUPS[i-1], StrLen(SV_DISPLAYABLE_POWERUPS[i-1])-6)) == 1)
                HudMessage(s:"A"; HUDMSG_PLAIN, i, 0, FixedDiv(i << 16, 65.0), 0.05, 0);
            else HudMessage(s:"A"; HUDMSG_PLAIN|HUDMSG_ALPHA, i, 0, FixedDiv(i << 16, 65.0), 0.05, 0, 0.25);
        }
        else HudMessage(s:""; HUDMSG_PLAIN, i, 0, 0, 0, 1);
    }

    ACS_NamedExecuteAlways("showStats", 0, displayFlag);
}

script "showStats" (int displayFlag) CLIENTSIDE {
    int pnum = PlayerNumber();
    int idFrom = DISPLAYABLE_POWERUP_MAX+1;
    for (int i=0; i<TEAR_STATS; i++) {
        if (displayFlag) {
            str stat = StrRight(TEARS_STATS_TABLE[i], StrLen(TEARS_STATS_TABLE[i])-1);
            if (i == 4 || i == 6) { stat = StrLeft(stat, StrLen(stat)-6); }
            SetFont("BIGFONT");
            HudMessage(s:stat, s:": ", i:TEARS_STATS_BY_PLAYER[pnum][i]; HUDMSG_PLAIN|HUDMSG_NOTWITHFULLMAP, idFrom+i, CR_ORANGE, 0.007, FixedDiv((i << 16) + 1.0 , 60.0) + 0.74, 0);
        }
        else HudMessage(s:""; HUDMSG_PLAIN, idFrom+i, 0, 0, 0, 1);
    }
}

script "checkForNoGiverInInventory" (int option) {
    SetResultValue(CheckInventory(StrLeft(SV_DISPLAYABLE_POWERUPS[option], StrLen(SV_DISPLAYABLE_POWERUPS[option])-6)) == 0);
}

script "checkForNoGiverInTargetInventory" (int option) {
    int ptid = GetActorProperty(0, APROP_TargetTID);
    SetResultValue(CheckActorInventory(ptid, StrLeft(SV_DISPLAYABLE_POWERUPS[option], StrLen(SV_DISPLAYABLE_POWERUPS[option])-6)) == 0);
}

script "checkForNoGiverInTracerInventory" (int option) {
    int ptid = GetActorProperty(0, APROP_TracerTID);
    SetResultValue(CheckActorInventory(ptid, StrLeft(SV_DISPLAYABLE_POWERUPS[option], StrLen(SV_DISPLAYABLE_POWERUPS[option])-6)) == 0);
}

// Por defecto duran 2:30 minutos, se puede agregar un parametro más adelante para duraciones especificas
script "activateTemporalPowerup" (int option) {
    str powerup = StrLeft(SV_DISPLAYABLE_POWERUPS[option], StrLen(SV_DISPLAYABLE_POWERUPS[option])-6);
    GiveInventory(powerup, 1);

    switch(option) {
        case 26: {
            ACS_NamedExecuteAlways("addTearBoost", 0, 2, 1);
            ACS_NamedExecuteAlways("addTearBoost", 0, 6, -2);
            ACS_NamedExecuteAlways("addTearBoost", 0, 4, -90);
            //ACS_NamedExecuteAlways("addTearBoost", 0, 1, 2); //Más height (para cuando zandro lo soporte)
        }; break;
        case 33: {
            ACS_NamedExecuteWithResult("addTearBoost", 0, 3, 5);
            //ACS_NamedExecuteWithResult("addTearBoost", 0, 1, 1);
            //ACS_NamedExecuteWithResult("addTearBoost", 0, 0, 1);
            //ACS_NamedExecuteWithResult("addTearBoost", 0, 5, 1);
        }; break;
        case 38: {
            if (CheckInventory("IsaacHands")) TakeInventory("IsaacHands", 1);
            if (CheckInventory("BlackIsaacHands")) TakeInventory("BlackIsaacHands", 1);
            if (CheckInventory("OrangeIsaacHands")) TakeInventory("OrangeIsaacHands", 1);
            if (CheckInventory("GreenIsaacHands")) TakeInventory("GreenIsaacHands", 1);

            GiveInventory("BrimstoneHands", 1);
            Delay(10);
            SetWeapon("BrimstoneHands");
            ACS_NamedExecuteAlways("setClientBrimstoneHands", 0);
            Delay(35);
            PlaySound(0, "agge/brimgrowl", CHAN_AUTO);
        }; break;
        case 39: {
            if (CheckInventory("BrimstoneHands")) break;
            if (CheckInventory("GreenIsaacHands")) break;
            if (CheckInventory("IsaacHands")) TakeInventory("IsaacHands", 1);
            if (CheckInventory("BlackIsaacHands")) TakeInventory("BlackIsaacHands", 1);

            GiveInventory("OrangeIsaacHands", 1);
            Delay(10);
            SetWeapon("OrangeIsaacHands");
            ACS_NamedExecuteAlways("setClientOrangeIsaacHands", 0);
        }; break;
        case 40: {
            //ACS_NamedExecuteAlways("addTearBoost", 0, 1, -3);
            //ACS_NamedExecuteAlways("addTearBoost", 0, 0, -3);
            ACS_NamedExecuteAlways("addTearBoost", 0, 5, -3);
            ACS_NamedExecuteAlways("addTearBoost", 0, 3, -10);
            ACS_NamedExecuteAlways("addTearBoost", 0, 4, -75);
            ACS_NamedExecuteAlways("addTearBoost", 0, 6, -3);
            if (CheckInventory("BrimstoneHands")) break;
            if (CheckInventory("IsaacHands")) TakeInventory("IsaacHands", 1);
            if (CheckInventory("BlackIsaacHands")) TakeInventory("BlackIsaacHands", 1);
            if (CheckInventory("OrangeIsaacHands")) TakeInventory("OrangeIsaacHands", 1);

            GiveInventory("GreenIsaacHands", 1);
            Delay(10);
            SetWeapon("GreenIsaacHands");
            ACS_NamedExecuteAlways("setClientGreenIsaacHands", 0);
        }; break;
    }

    Delay(5250);

    switch(option) {
        case 26: {
            ACS_NamedExecuteAlways("addTearBoost", 0, 2, -1);
            ACS_NamedExecuteAlways("addTearBoost", 0, 6, 2);
            ACS_NamedExecuteAlways("addTearBoost", 0, 4, 90);
            //ACS_NamedExecuteAlways("addTearBoost", 0, 1, -2); //Más height (para cuando zandro lo soporte)
        }; break;
        case 33: {
            ACS_NamedExecuteWithResult("addTearBoost", 0, 3, -5);
            //ACS_NamedExecuteWithResult("addTearBoost", 0, 1, -1);
            //ACS_NamedExecuteWithResult("addTearBoost", 0, 0, -1);
            //ACS_NamedExecuteWithResult("addTearBoost", 0, 5, -1);
        }; break;
        case 38: {
            TakeInventory("BrimstoneHands", 1);
            if (CheckInventory("IpecacGiver")) {
                GiveInventory("GreenIsaacHands", 1);
                Delay(10);
                SetWeapon("GreenIsaacHands");
                ACS_NamedExecuteAlways("setClientGreenIsaacHands", 0);
            }
            else {
                if (CheckInventory("FireMindGiver")) {
                    GiveInventory("OrangeIsaacHands", 1);
                    Delay(10);
                    SetWeapon("OrangeIsaacHands");
                    ACS_NamedExecuteAlways("setClientOrangeIsaacHands", 0);
                }
                else {
                    if (CheckInventory("DarkMatterGiver")) {
                        GiveInventory("BlackIsaacHands", 1);
                        Delay(10);
                        SetWeapon("BlackIsaacHands");
                        ACS_NamedExecuteAlways("setClientBlackIsaacHands", 0);
                    }
                    else {
                        GiveInventory("IsaacHands", 1);
                        Delay(10);
                        SetWeapon("IsaacHands");
                        ACS_NamedExecuteAlways("setClientIsaacHands", 0);
                    }
                }
            }
        }; break;
        case 39: {
            TakeInventory("OrangeIsaacHands", 1);
            if (CheckInventory("DarkMatterGiver")) {
                GiveInventory("BlackIsaacHands", 1);
                Delay(10);
                SetWeapon("BlackIsaacHands");
                ACS_NamedExecuteAlways("setClientBlackIsaacHands", 0);
            }
            else {
                GiveInventory("IsaacHands", 1);
                Delay(10);
                SetWeapon("IsaacHands");
                ACS_NamedExecuteAlways("setClientIsaacHands", 0);
            }
        }; break;
        case 40: {
            ACS_NamedExecuteAlways("addTearBoost", 0, 6, 3);
            //ACS_NamedExecuteAlways("addTearBoost", 0, 1, 3);
            //ACS_NamedExecuteAlways("addTearBoost", 0, 0, 3);
            ACS_NamedExecuteAlways("addTearBoost", 0, 5, 3);
            ACS_NamedExecuteAlways("addTearBoost", 0, 3, 10);
            ACS_NamedExecuteAlways("addTearBoost", 0, 4, 75);
            TakeInventory("GreenIsaacHands", 1);
            if (CheckInventory("FireMindGiver")) {
                GiveInventory("OrangeIsaacHands", 1);
                Delay(10);
                SetWeapon("OrangeIsaacHands");
                ACS_NamedExecuteAlways("setClientOrangeIsaacHands", 0);
            }
            else {
                if (CheckInventory("DarkMatterGiver")) {
                    GiveInventory("BlackIsaacHands", 1);
                    Delay(10);
                    SetWeapon("BlackIsaacHands");
                    ACS_NamedExecuteAlways("setClientBlackIsaacHands", 0);
                }
                else {
                    GiveInventory("IsaacHands", 1);
                    Delay(10);
                    SetWeapon("IsaacHands");
                    ACS_NamedExecuteAlways("setClientIsaacHands", 0);
                }
            }
        }; break;
    }

    TakeInventory(powerup, 1);
}

script "setClientBrimstoneHands" (void) CLIENTSIDE {
    SetWeapon("BrimstoneHands");
}

script "setClientGreenIsaacHands" (void) CLIENTSIDE {
    SetWeapon("GreenIsaacHands");
}

script "setClientOrangeIsaacHands" (void) CLIENTSIDE {
    SetWeapon("OrangeIsaacHands");
}

script "setClientBlackIsaacHands" (void) CLIENTSIDE {
    SetWeapon("BlackIsaacHands");
}

script "setClientIsaacHands" (void) CLIENTSIDE {
    SetWeapon("IsaacHands");
}

script "setParasiteChildrenStats" (int ctid) {
    int masterDmg = GetActorProperty(0, APROP_Damage);
    int masterScaleX = GetActorProperty(0, APROP_ScaleX);
    int masterScaleY = GetActorProperty(0, APROP_ScaleY);
    int masterRange = GetUserVariable(0, "user_remaining_range");

    int masterExplosionFlag;
    if (CheckActorClass(0, "FireTearProjectile") && GetUserVariable(0, "user_explosion_flag") ||
        CheckActorClass(0, "BouncingFireTearProjectile") && GetUserVariable(0, "user_explosion_flag") ||
        CheckActorClass(0, "MonstroBouncingFireTearProjectile") && GetUserVariable(0, "user_explosion_flag")) {
        masterExplosionFlag = 1;
    }

    int masterGravity;
    if (CheckActorClass(0, "ExplosiveTearProjectile") ||
        CheckActorClass(0, "BouncingExplosiveTearProjectile")) {
        masterGravity = GetActorProperty(0, APROP_Gravity);
        int masterExplosionRange = GetUserVariable(0, "user_explosion_range");
    }

    SetActivator(ctid);

    SetActorProperty(0, APROP_Damage, masterDmg / 2);

    //Lo mismo sería para height y radius
    SetActorProperty(0, APROP_ScaleX, masterScaleX / 2);
    SetActorProperty(0, APROP_ScaleY, masterScaleY / 2);

    if (masterGravity != 0) {
        SetActorProperty(0, APROP_Gravity, masterGravity);
        SetUserVariable(0, "user_explosion_range", masterExplosionRange);
        Thing_ChangeTID(ctid, 0);
        terminate;
    }

    if (masterRange < 5) masterRange = 5;
    ACS_NamedExecuteAlways("setRange", 0, masterRange);

    if (masterExplosionFlag) SetUserVariable(0, "user_explosion_flag", 1);
    Thing_ChangeTID(ctid, 0);
}

script "isDamageTooLow" (int threshold) {
    SetResultValue(GetActorProperty(0, APROP_Damage) < threshold);
}

script "checkForBackstabDebuff" (void) {
    int projectileAngle = GetActorAngle(0) >> 8;
    int projectileDamage = GetActorProperty(0, APROP_Damage);

    if (SetActivator(0, AAPTR_TRACER)) {
        int monsterAngle = GetActorAngle(0) >> 8;
        int minThreshold, maxThreshold;

        if (monsterAngle >= 32 && monsterAngle < 224) {
            minThreshold = monsterAngle - 32;
            maxThreshold = monsterAngle + 32;
            if (projectileAngle >= minThreshold && projectileAngle <= maxThreshold) {
                ACS_NamedExecuteAlways("dealBackstabDamage", 0, projectileDamage);
            }
        }
        else {
            if (monsterAngle < 32) {
                minThreshold = monsterAngle + 224;
                maxThreshold = monsterAngle + 32;
                if (projectileAngle >= minThreshold || projectileAngle <= maxThreshold) {
                    ACS_NamedExecuteAlways("dealBackstabDamage", 0, projectileDamage);
                }
            }
            else {
                minThreshold = monsterAngle - 224;
                maxThreshold = monsterAngle - 32;
                if (projectileAngle <= minThreshold || projectileAngle >= maxThreshold) {
                    ACS_NamedExecuteAlways("dealBackstabDamage", 0, projectileDamage);
                }
            }
        }
    }

}

script "dealBackstabDamage" (int damage) {
    // Segundo golpe y efecto bleeding
    Thing_Damage2(0, damage, "None");
    ACS_NamedExecuteAlways("applyEffect", 0, 6);
}

script "setIsaacHandsSelected" (int isOn) {
    SetUserVariable(0, "user_isaac_hands_is_active", isOn);
}

script "isParasiteProjectile" (void) {
    SetResultValue(CheckActorClass(0, "ParasiteTearProjectile")
                || CheckActorClass(0, "ParasiteFearTearProjectile")
                || CheckActorClass(0, "ParasiteBouncingTearProjectile")
                || CheckActorClass(0, "ParasiteBouncingFearTearProjectile"));
}

script "setDamageToChildren" (int tid) {
    int masterDmg = GetActorProperty(0, APROP_Damage);
    int masterPetrFlag = GetUserVariable(0, "user_petrifying_flag");
    int masterPoisonFlag = GetUserVariable(0, "user_poison_flag");
    SetActivator(tid);
    SetUserVariable(0, "user_master_damage", masterDmg);
    SetUserVariable(0, "user_petrifying_flag", masterPetrFlag);
    SetUserVariable(0, "user_poison_flag", masterPoisonFlag);
    Thing_ChangeTID(tid, 0);
}

script "dealPiercingDamage" (void) {
    int damageToDeal = GetUserVariable(0, "user_master_damage");
    if (SetActivator(0, AAPTR_TRACER)) {
        if (CheckInventory("PiercingDamageFlag") == 0) {
            GiveInventory("PiercingDamageFlag", 1);
            Thing_Damage2(0, damageToDeal*3, "Piercing");
            PlaySound(0, "agge/scythehit", CHAN_AUTO);
            Delay(1);
            TakeInventory("PiercingDamageFlag", 1);
        }
    }
}

script "setTracerToPlayer" (void) {
    // La cantidad de tics completa de la rotación del sprite tiene que ser idealmente de 5
    int ptid = GetActorProperty(0, APROP_TargetTID);
    int currVelX = GetActorVelX(0);
    int currVelY = GetActorVelY(0);
    int currVelZ = GetActorVelZ(0);
    SetActorVelocity(0, 0, 0, 0, false, false);
    int currAngle = GetActorAngle(0);
    int newAngle;
    if (currAngle > 0.5) newAngle = currAngle - 0.5;
    else newAngle = currAngle + 0.5;

    SetActorAngle(0, newAngle);
    PlaySound(0, "agge/reflactivated", CHAN_AUTO);
    Delay(4);
    SetActorVelocity(0, currVelX, currVelY, currVelZ, false, false);
    SetPointer(AAPTR_TRACER, ptid);
    TakeActorInventory(ptid, "WeaponSpecialAction", 1);
}

script "getChargedAttackTime" (void) {
    int frboost = ACS_NamedExecuteWithResult("getFireRateBoost");
    
    if (CheckInventory("BrimstoneGiver")) frboost = 0.33 * frboost;
    else if (CheckInventory("MonstrosLungGiver")) frboost = 0.23 * frboost;

    int factor = FixedMul(frboost, 1.5);
    int maxTime = 87.5;
    int result = FixedDiv(maxTime, factor) >> 16;
    SetResultValue(result);
}

script "getBrimstoneDamage" (void) {
    if (CheckActorClass(0, "PlayerDoppelganger")) SetActivator(GetActorProperty(0, APROP_MasterTID));
    int pnum = PlayerNumber();
    int damage = TEARS_STATS_BY_PLAYER[pnum][2];
    damage = applyGiversToDamage(damage, SV_PLAYERS_NUMBERS_2_TIDS[pnum]);
    SetResultValue(damage);
}

script "setBrimstoneColor" (void) CLIENTSIDE {
    BRIMSTONE_COLOR = 0;
    if (CheckInventory("ALumpOfCoalGiver")) BRIMSTONE_COLOR = 14;
    if (CheckInventory("LostContactGiver")) BRIMSTONE_COLOR = 15;
    if (CheckInventory("TheCommonColdGiver")) BRIMSTONE_COLOR = 16;
    if (CheckInventory("SacredHeartGiver")) BRIMSTONE_COLOR = 17;
    if (CheckInventory("SpoonBenderGiver")) BRIMSTONE_COLOR = 18;
    if (CheckInventory("TheParasiteGiver")) BRIMSTONE_COLOR = 19;
}

script "showBrimstoneTranslation" (void) CLIENTSIDE {
    Thing_SetTranslation(0, BRIMSTONE_COLOR);
    if (BRIMSTONE_COLOR == 16 || BRIMSTONE_COLOR == 17 || BRIMSTONE_COLOR == 18) {
        if (CheckActorClass(0, "BrimstoneBeam")) SetActorProperty(0, APROP_Alpha, 0.2);
    }
    if (BRIMSTONE_COLOR == 15) SetActorProperty(0, APROP_Alpha, 0.2);
    if (BRIMSTONE_COLOR == 14) SetActorProperty(0, APROP_RenderStyle, STYLE_Translucent);
}

script "setBrimstoneDeathRender" (void) CLIENTSIDE {
    if (!BRIMSTONE_COLOR || BRIMSTONE_COLOR == 16 || 
        BRIMSTONE_COLOR == 15 || BRIMSTONE_COLOR == 17 ||
        BRIMSTONE_COLOR == 18 || BRIMSTONE_COLOR == 19) {
        SetActorProperty(0, APROP_RenderStyle, STYLE_Translucent);
    }
    else SetActorProperty(0, APROP_RenderStyle, STYLE_Add);
}

script "setBrimstoneDamage" (void) {
    int tempTid = UniqueTID();
    Thing_ChangeTID(0, tempTid);
    SetActivator(0, AAPTR_TARGET);
    int damage = ACS_NamedExecuteWithResult("getBrimstoneDamage");
    SetActorProperty(tempTid, APROP_Damage, damage);
    Thing_ChangeTID(tempTid, 0);
}

script "userIsaacHandsLaserFromBehingIsActive" (void) {
    SetResultValue(GetUserVariable(0, "user_isaac_hands_laser_from_behind"));
}

script "transferMasterEffectsInventory" (void) {
    int ptid = GetActorProperty(0, APROP_MasterTID);

    if (!ptid) {
        int utid = UniqueTID();
        Thing_ChangeTID(0, utid);
        SetActivator(0, AAPTR_MASTER);
        ptid = GetActorProperty(0, APROP_TargetTID);
        SetActivator(utid);
        SetPointer(AAPTR_MASTER, ptid);
        Thing_ChangeTID(utid, 0);
    }
    
    int effectsPowerups[12] = {"LostContactGiver", "TheCommonColdGiver", "DarkMatterGiver",
                                "MomsContactsGiver", "ALumpOfCoalGiver", "Infestation2Giver",
                                "PiscesGiver", "8InchNailsGiver", "TheParasiteGiver", "RubberCementGiver",
                                "FireMindGiver", "IpecacGiver"};

    for (int i=0; i<12; i++) {
        if (CheckActorInventory(ptid, effectsPowerups[i])) GiveInventory(effectsPowerups[i], 1);
    }
}

script "transferMasterPitch" (void) {
    SetActorPitch(0, GetActorPitch(GetActorProperty(0, APROP_MasterTID)));
}

script "setIpecacStats" (void) {
    Thing_SetTranslation(0, 21);
    int ptid = GetActorProperty(0, APROP_TargetTID);
    int pnum = ACS_NamedExecuteWithResult("getPlayerNumberFromTID", ptid);
    ACS_NamedExecuteAlways("setRadius", 0, TEARS_STATS_BY_PLAYER[pnum][0]);
    ACS_NamedExecuteAlways("setHeight", 0, TEARS_STATS_BY_PLAYER[pnum][1]);
    ACS_NamedExecuteAlways("setDamage", 0, TEARS_STATS_BY_PLAYER[pnum][2], ptid);
    ACS_NamedExecuteAlways("setGravity", 0, TEARS_STATS_BY_PLAYER[pnum][3], ptid);
    ACS_NamedExecuteAlways("setSpeed", 0, TEARS_STATS_BY_PLAYER[pnum][4], ptid);
    ACS_NamedExecuteAlways("setScale", 0, TEARS_STATS_BY_PLAYER[pnum][5]);
    ACS_NamedExecuteAlways("setExplosionRange", 0, TEARS_STATS_BY_PLAYER[pnum][5]);

    if (CheckActorInventory(ptid, "ALumpOfCoalGiver")) {
        Thing_SetTranslation(0, 2);
        ACS_NamedExecuteAlways("setDamageBoostPerTime", 0, 1, 35, 10);
    }

    if (CheckActorInventory(ptid, "BloodOfTheMartyrGiver")) Thing_SetTranslation(0, 3);
    if (CheckActorInventory(ptid, "LostContactGiver")) Thing_SetTranslation(0, 10);
    if (CheckActorInventory(ptid, "SacredHeartGiver")) Thing_SetTranslation(0, 8);
    if (CheckActorInventory(ptid, "SpoonBenderGiver")) Thing_SetTranslation(0, 9);
    if (CheckActorInventory(ptid, "TheParasiteGiver")) Thing_SetTranslation(0, 13);
}

script "setGravity" (int gravity) {
    gravity = 0.5 - (FixedMul(0.1, FixedDiv(gravity << 16, 35.0)));
    SetActorProperty(0, APROP_Gravity, gravity);
}

script "setExplosionRange" (int range) {
    if (range < 1) range = 1;
    range = range * 32;
    SetUserVariable(0, "user_explosion_range", range);
}

script "hasHitAnEnemy" (void) {
    SetResultValue(SetActivator(0, AAPTR_TRACER));
}